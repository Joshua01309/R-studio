theme_classic()
ggplotly(grafica_derivada)
df <- function(x){2*exp(2*x)}
karen_derivada <-spline_der(mispline)
der_nodos <- df(x_nodos)
my_colors <- c("f'(x)"="green","S'(x)"="tomato3","Valores"="firebrick")
grafica_derivada <- ggplot()+
geom_function(aes(color="f'(x)"),fun=df)+
geom_function(aes(color="S'(x)"),fun=karen_derivada,linewidth=0.75)+
geom_point(aes(x_nodos,der_nodos,color="Valores"),size=3)+
scale_color_manual(values=my_colors)+
scale_x_continuous(breaks=x_nodos,limits=c(x_0,x_n))+
labs(x="x",y="y",color="Función")+
theme_classic()
ggplotly(grafica_derivada)
?mc_commute_wide
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(tidyverse)
library(discrtr) # A companion package for the book Introduction to Discrete Choice Analysis with `R`
library(mlogit) # Multinomial Logit Models
library(readr) # Read Rectangular Text Data
library(gplots) # Various R Programming Tools for Plotting Data
library(ggmosaic) # Mosaic Plots in the 'ggplot2' Framework
library(treemapify)
library(ggridges)
library(ggalluvial)
data("Car")
glimpse(Car)
Car$college <- factor(Car$college, levels = c("0", "1"), labels = c("No", "Yes"))
summary(Car)
?Car
data("Car")
glimpse(Car)
Car$college <- factor(Car$college, levels = c("0", "1"), labels = c("No", "Yes"))
summary(Car)
View(Car)
car_alluvia <- Car |>
select(college, type1, type2, choice) |>
group_by(college, type1, type2, choice) |>
summarize(frequency = n(), .groups = "drop")
View(car_alluvia)
car_alluvia |>
ggplot(aes(y = frequency, axis1 = college, axis2 = type1, axis3 = type2, axis4=choice)) +
geom_alluvium(aes(fill = college), width = 1/12, color = "black") +
geom_stratum(width = 1/4, fill = "black", color = "grey") +
geom_text(stat = "stratum", aes(label = after_stat(stratum)), color = "white", size = 3) +
scale_x_discrete(limits = c("College", "Type 1","Type 2", "Choice"), expand = c(.05, .05)) +
scale_fill_brewer(type = "qual", palette = "Dark2") +
theme_minimal()
library(ggplot2)
# Combinar los conjuntos de datos utilizando las variables clave
combined_data <- merge(mc_commute_wide, car_alluvia, by = c("college", "type1", "type2", "choice"), all.x = TRUE)
library(ggplot2)
# Combinar los conjuntos de datos utilizando las variables clave
combined_data <- merge(mc_commute_wide, car_alluvia, by = c("college", "type1", "type2", "choice"), all.x = TRUE)
Car_alluvia |> ggplot(aes(x = college)) +
geom_bar(color = "black", fill = "white") +
labs(x = "Educación Escolar")
car_alluvia <- Car |>
select(college, type1, type2, choice) |>
group_by(college, type1, type2, choice) |>
summarize(frequency = n(), .groups = "drop")
Car_alluvia |> ggplot(aes(x = college)) +
geom_bar(color = "black", fill = "white") +
labs(x = "Educación Escolar")
Car |> ggplot(aes(x = college)) +
geom_bar(color = "black", fill = "white") +
labs(x = "Educación Escolar")
Car |> ggplot(aes(x = college)) +
geom_bar(color = "black", fill = "white") +
labs(x = "Educación Escolar", y="Numero de encuestados")
Car |> group_by(choice) |> summarize(n = n()) |>
ggplot(aes(x = choice, xend = choice, y = n, yend = 0)) +
geom_point(color = "black", fill = "white", size = 6) +
geom_segment(linewidth = 1) +
labs(x = "Elección de vehiculo", y = "Number of respondents")
Car |> group_by(type1) |> summarize(n = n()) |>
ggplot(aes(fill = type1, area = n)) +
geom_treemap() +
labs(title = "Trips by mode", fill="Mode")
Car |> group_by(type1) |> summarize(n = n()) |>
ggplot(aes(fill = type1, area = n)) +
geom_treemap() +
labs(title = "Clase del tipo 1", fill="Modos")
Car |> group_by(type2) |> summarize(n = n()) |>
ggplot(aes(fill = type2, area = n)) +
geom_treemap() +
labs(title = "Clase de tipo 2", fill="Modos")
Car |> group_by(type1) |> summarize(n = n()) |>
ggplot(aes(fill = type1, area = n)) +
geom_treemap() +
labs(title = "Opcion tipo 1", fill="Tipo")
Car |> group_by(type2) |> summarize(n = n()) |>
ggplot(aes(fill = type2, area = n)) +
geom_treemap() +
labs(title = "Opcion tipo 2", fill="Tipo")
Car |>  ggplot(aes(x = choice, y = price1)) +
geom_boxplot()
Car |>  ggplot(aes(x = choice, y = range1)) +
geom_boxplot()
Car |>  ggplot(aes(x = choice, y = pollution1)) +
geom_boxplot()
Car |>  ggplot(aes(x = choice, y = pollution2)) +
geom_boxplot()
Car |>  ggplot(aes(x = choice, y = size1)) +
geom_boxplot()
Car |>  ggplot(aes(x = choice, y = range1)) +
geom_boxplot()
Car |>  ggplot(aes(x = choice, y = cost1)) +
geom_boxplot()
Car |>  select(choice, cost1) |> summary()
Car |>  ggplot(aes(x = college, y = price6, fill = college)) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.1, fill = "white") +
labs(x="Mode", y = expression("Sidewalk density (km/km"^2*")"), fill = "Mode")
Car |>  ggplot(aes(x = college, y = price1, fill = college)) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.1, fill = "white") +
labs(x="Mode", y = expression("Sidewalk density (km/km"^2*")"), fill = "Mode")
Car |>  ggplot(aes(x = college, y = price1, fill = college)) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.1, fill = "white") +
labs(x="Colegio", y = expression("Precio")"), fill = "Mode")
Car |>  ggplot(aes(x = college, y = price1, fill = college)) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.1, fill = "white") +
labs(x="Colegio", y = expression("Precio")), fill = "Mode")
Car |>  ggplot(aes(x = college, y = price1, fill = college)) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.1, fill = "white") +
labs(x="Colegio", y = expression("Precio"), fill = "Mode")
Car |>  ggplot(aes(x = college, y = price1, fill = college)) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.1, fill = "white") +
labs(x="Colegio", y = expression("Precio"), fill = "Precio")
Car |>  ggplot(aes(x = college, y = price1, fill = college)) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.1, fill = "white") +
labs(x="Colegio", y = expression("Precio"), fill = "College")
Car %>% ggplot(aes(x = price1, y = college, fill = college)) +
geom_density_ridges(jittered_points = TRUE, bandwidth = 3.5,
position = position_points_jitter(width = 0.05, height = 0),
point_shape = '|', point_size = 3, point_alpha = 1, alpha = 0.7) +
labs(y="college", x = expression("Prece1"), fill = "College")
Car %>% ggplot(aes(x = price1, y = type1, fill = type1)) +
geom_density_ridges(jittered_points = TRUE, bandwidth = 3.5,
position = position_points_jitter(width = 0.05, height = 0),
point_shape = '|', point_size = 3, point_alpha = 1, alpha = 0.7) +
labs(y="type1", x = expression("Prece1"), fill = "type1")
Car %>% ggplot(aes(x = speed1, y = type1, fill = type1)) +
geom_density_ridges(jittered_points = TRUE, bandwidth = 3.5,
position = position_points_jitter(width = 0.05, height = 0),
point_shape = '|', point_size = 3, point_alpha = 1, alpha = 0.7) +
labs(y="type1", x = expression("speed1"), fill = "type1")
Car %>% ggplot(aes(x = speed2, y = type1, fill = type1)) +
geom_density_ridges(jittered_points = TRUE, bandwidth = 3.5,
position = position_points_jitter(width = 0.05, height = 0),
point_shape = '|', point_size = 3, point_alpha = 1, alpha = 0.7) +
labs(y="type1", x = expression("speed1"), fill = "type1")
Car %>% ggplot(aes(x = speed6, y = type1, fill = type1)) +
geom_density_ridges(jittered_points = TRUE, bandwidth = 3.5,
position = position_points_jitter(width = 0.05, height = 0),
point_shape = '|', point_size = 3, point_alpha = 1, alpha = 0.7) +
labs(y="type1", x = expression("speed1"), fill = "type1")
Car %>% ggplot(aes(x = speed6, y = type1, fill = type1)) +
geom_density_ridges(jittered_points = TRUE, bandwidth = 3.5,
position = position_points_jitter(width = 0.05, height = 0),
point_shape = '|', point_size = 3, point_alpha = 1, alpha = 0.7) +
labs(y="type1", x = expression("speed6"), fill = "type1")
library(plotrix)
tableau <- table(Car$choice, Car$college)
balloonplot(
as.table(tableau),
xlab = "Mode",
ylab = "Dependent minor(s)",
dotsize = 3/max(strwidth(19), strheight(19)),
dotcolor = "skyblue",
text.size = 0.65,
main = "Mode as a function of dependent minors in household",
label = TRUE,
label.size = 0.80,
scale.method = c("volume"),
scale.range = c("absolute"),
colmar = 1, rowmar = 2,
show.zeros = TRUE,
show.margins = TRUE,
cum.margins = TRUE
)
tableau <- table(Car$choice, Car$fuel1)
balloonplot(
as.table(tableau),
xlab = "Mode",
ylab = "Dependent minor(s)",
dotsize = 3/max(strwidth(19), strheight(19)),
dotcolor = "skyblue",
text.size = 0.65,
main = "Mode as a function of dependent minors in household",
label = TRUE,
label.size = 0.80,
scale.method = c("volume"),
scale.range = c("absolute"),
colmar = 1, rowmar = 2,
show.zeros = TRUE,
show.margins = TRUE,
cum.margins = TRUE
)
tableau <- table(Car$choice, Car$fuel1)
balloonplot(
as.table(tableau),
xlab = "Combustible",
ylab = "Elección",
dotsize = 3/max(strwidth(19), strheight(19)),
dotcolor = "skyblue",
text.size = 0.65,
main = "Modo como una elección de combutible 1",
label = TRUE,
label.size = 0.80,
scale.method = c("volume"),
scale.range = c("absolute"),
colmar = 1, rowmar = 2,
show.zeros = TRUE,
show.margins = TRUE,
cum.margins = TRUE
)
tableau <- table(Car$choice, Car$fuel1)
balloonplot(
as.table(tableau),
xlab = "Eleccción",
ylab = "Combustible",
dotsize = 3/max(strwidth(19), strheight(19)),
dotcolor = "skyblue",
text.size = 0.65,
main = "Modo como una elección de combutible 1",
label = TRUE,
label.size = 0.80,
scale.method = c("volume"),
scale.range = c("absolute"),
colmar = 1, rowmar = 2,
show.zeros = TRUE,
show.margins = TRUE,
cum.margins = TRUE
)
library(plotrix)
tableau <- table(Car$choice, Car$college)
balloonplot(
as.table(tableau),
xlab = "Eleccion",
ylab = "Colegio",
dotsize = 3/max(strwidth(19), strheight(19)),
dotcolor = "skyblue",
text.size = 0.65,
main = "Modo como una funcion de colegio",
label = TRUE,
label.size = 0.80,
scale.method = c("volume"),
scale.range = c("absolute"),
colmar = 1, rowmar = 2,
show.zeros = TRUE,
show.margins = TRUE,
cum.margins = TRUE
)
Car |>  ggplot() +
geom_mosaic(aes(x = product(choice, fuel4), fill = choice)) +
labs(x = "Dependent minor(s)", y = "Mode", fill = "Mode")
Car |>  ggplot() +
geom_mosaic(aes(x = product(type1, fuel4), fill = type1)) +
labs(x = "Combustible", y = "Mode", fill = "Mode")
Car |>  ggplot() +
geom_mosaic(aes(x = product(type1, fuel4), fill = type1)) +
labs(x = "Combustible 4", y = "Mode", fill = "Mode")
Car |>  ggplot() +
geom_mosaic(aes(x = product(type2, fuel4), fill = type2)) +
labs(x = "Combustible", y = "Mode", fill = "Mode")
Car |> group_by(choice, type3) |>
summarize(n = n(), .groups = "drop") |>
ggplot(aes(x = choice, y = type3)) +
geom_tile(aes(fill = n)) +
labs(x = "Mode", y = "tipo 3", fill = "Number of respondents")
Car |> group_by(choice, college) |>
summarize(n = n(), .groups = "drop") |>
ggplot(aes(x = choice, y = college)) +
geom_tile(aes(fill = n)) +
labs(x = "Mode", y = "tipo 3", fill = "Number of respondents")
Car |> group_by(choice, fuel4) |>
summarize(n = n(), .groups = "drop") |>
ggplot(aes(x = choice, y = fuel4)) +
geom_tile(aes(fill = n)) +
labs(x = "Mode", y = "tipo 3", fill = "Number of respondents")
Car |> group_by(choice, fuel2) |>
summarize(n = n(), .groups = "drop") |>
ggplot(aes(x = choice, y = fuel4)) +
geom_tile(aes(fill = n)) +
labs(x = "Mode", y = "tipo 3", fill = "Number of respondents")
Car |> group_by(choice, fuel2) |>
summarize(n = n(), .groups = "drop") |>
ggplot(aes(x = choice, y = fuel2)) +
geom_tile(aes(fill = n)) +
labs(x = "Mode", y = "tipo 3", fill = "Number of respondents")
Car |> group_by(choice, type2) |>
summarize(n = n(), .groups = "drop") |>
ggplot(aes(x = choice, y = type2)) +
geom_tile(aes(fill = n)) +
labs(x = "Mode", y = "tipo 3", fill = "Number of respondents")
Car |> group_by(choice, type2) |>
summarize(n = n(), .groups = "drop") |>
ggplot(aes(x = choice, y = type2)) +
geom_tile(aes(fill = n)) +
labs(x = "Mode", y = "type 2", fill = "Number of respondents")
Car |> ggplot(aes(x = fuel4, fill = choice)) +
geom_bar(position = "fill") +
labs(y = "Proportion", x = "Combustible 4", fill="Mode")
Car |> ggplot(aes(x = type2, fill = choice)) +
geom_bar(position = "fill") +
labs(y = "Proportion", x = "tipe 2", fill="Mode")
ggplot(data = Car, aes(x = speed6, y = type1, fill = college)) +
geom_density_ridges(jittered_points = TRUE, bandwidth = 3.5,
position = position_points_jitter(width = 0.05, height = 0),
point_shape = '|', point_size = 3, point_alpha = 1, alpha = 0.7) +
labs(y="Mode", x = expression("Sidewalk density (km/km"^2*")"),
fill = "Individual access to a vehicle")
ggplot(data = Car, aes(x = speed6, y = type1, fill = fuel6)) +
geom_density_ridges(jittered_points = TRUE, bandwidth = 3.5,
position = position_points_jitter(width = 0.05, height = 0),
point_shape = '|', point_size = 3, point_alpha = 1, alpha = 0.7) +
labs(y="Mode", x = expression("Sidewalk density (km/km"^2*")"),
fill = "Individual access to a vehicle")
ggplot(data = Car, aes(x = speed6, y = type1, fill = fuel1)) +
geom_density_ridges(jittered_points = TRUE, bandwidth = 3.5,
position = position_points_jitter(width = 0.05, height = 0),
point_shape = '|', point_size = 3, point_alpha = 1, alpha = 0.7) +
labs(y="type1 1", x = expression("Speed 6"),
fill = "Fuel 1")
ggplot(data = Car |>  group_by(choice, college) |>
summarize(n = n(), pollution1 = mean(pollution1), .groups = "drop"),
aes(area = n, fill = pollution1, label = college, subgroup = choice)) +
geom_treemap() +
geom_treemap_subgroup_border(size = 5)+
geom_treemap_subgroup_text(fontface = "bold", colour = "white", place = "topleft",
size = 13, grow = FALSE) +
geom_treemap_text(fontface = "italic", colour = "lightgray", place = "centre", size = 10,
grow = FALSE) +
labs(title = "Preferencia por modo-colegio y contaminación",
fill = expression("contaminacion")
ggplot(data = Car |>  group_by(choice, college) |>
summarize(n = n(), pollution1 = mean(pollution1), .groups = "drop"),
aes(area = n, fill = pollution1, label = college, subgroup = choice)) +
geom_treemap() +
geom_treemap_subgroup_border(size = 5)+
geom_treemap_subgroup_text(fontface = "bold", colour = "white", place = "topleft",
size = 13, grow = FALSE) +
geom_treemap_text(fontface = "italic", colour = "lightgray", place = "centre", size = 10,
grow = FALSE) +
labs(title = "Preferencia por modo-colegio y contaminación",
fill = expression("contaminacion")
library(ggplot2)
library(dplyr)
Car <- data.frame(
choice = c("Car", "Public", "Bike", "Walk"),
college = rep(c("A", "B", "C", "D"), each = 4),
pollution1 = runif(16, min = 0, max = 100)
)
ggplot(data = Car %>%
group_by(choice, college) %>%
summarize(n = n(), pollution1 = mean(pollution1), .groups = "drop"),
aes(area = n, fill = pollution1, label = college)) +
geom_treemap() +
geom_treemap_subgroup_border(size = 0.5) +
geom_treemap_subgroup_text(fontface = "bold", colour = "white", place = "topleft",
size = 3, grow = FALSE) +
geom_treemap_text(fontface = "italic", colour = "lightgray", place = "centre", size = 3,
grow = FALSE) +
labs(title = "Preferencia por modo-colegio y contaminación",
fill = "Contaminación")
Car <- data.frame(
choice = c("Car", "Public", "Bike", "Walk"),
college = rep(c("A", "B", "C", "D"), each = 4),
pollution1 = runif(16, min = 0, max = 100)
)
ggplot(data = Car %>%
group_by(choice, college) %>%
summarize(n = n(), pollution1 = mean(pollution1), .groups = "drop"),
aes(area = n, fill = pollution1, label = college)) +
geom_treemap() +
geom_treemap_subgroup_border(size = 0.5) +
geom_treemap_subgroup_text(fontface = "bold", colour = "white", place = "topleft",
size = 3, grow = FALSE) +
geom_treemap_text(fontface = "italic", colour = "lightgray", place = "centre", size = 3,
grow = FALSE) +
labs(title = "Preferencia por modo-colegio y contaminación",
fill = "Contaminación")
ggplot(data = Car |>  group_by(choice, college) |>
summarize(n = n(), pollution1 = mean(pollution1), .groups = "drop"),
aes(area = n, fill = pollution1, label = college, subgroup = choice)) +
geom_treemap() +
geom_treemap_subgroup_border(size = 5)+
geom_treemap_subgroup_text(fontface = "bold", colour = "white", place = "topleft",
size = 13, grow = FALSE) +
geom_treemap_text(fontface = "italic", colour = "lightgray", place = "centre", size = 10,
grow = FALSE) +
labs(title = "Preferencia por modo-colegio y contaminación",
fill = expression("contaminacion"))
ggplot(data = Car |>  group_by(choice, college) |>
summarize(n = n(), pollution1 = mean(pollution1), .groups = "drop"),
aes(area = n, fill = pollution1, label = college, subgroup = choice)) +
geom_treemap() +
geom_treemap_subgroup_border(size = 5)+
geom_treemap_subgroup_text(fontface = "bold", colour = "white", place = "topleft",
size = 13, grow = FALSE) +
geom_treemap_text(fontface = "italic", colour = "lightgray", place = "centre", size = 10,
grow = FALSE) +
labs(title = "Preferencia por modo-colegio y contaminación",
fill = expression("contaminacion"))
data("Car")
glimpse(Car)
Car$college <- factor(Car$college, levels = c("0", "1"), labels = c("No", "Yes"))
summary(Car)
ggplot(data = Car |>  group_by(choice, college) |>
summarize(n = n(), pollution1 = mean(pollution1), .groups = "drop"),
aes(area = n, fill = pollution1, label = college, subgroup = choice)) +
geom_treemap() +
geom_treemap_subgroup_border(size = 5)+
geom_treemap_subgroup_text(fontface = "bold", colour = "white", place = "topleft",
size = 13, grow = FALSE) +
geom_treemap_text(fontface = "italic", colour = "lightgray", place = "centre", size = 10,
grow = FALSE) +
labs(title = "Preferencia por modo-colegio y contaminación",
fill = expression("contaminacion"))
car_alluvia |>
ggplot(aes(y = frequency, axis1 = college, axis2 = type1, axis3=choice)) +
geom_alluvium(aes(fill = college), width = 1/12, color = "black") +
geom_stratum(width = 1/3, fill = "black", color = "grey") +
geom_text(stat = "stratum", aes(label = after_stat(stratum)), color = "white", size = 3) +
scale_x_discrete(limits = c("College", "Type 1", "Choice"), expand = c(.05, .05)) +
scale_fill_brewer(type = "qual", palette = "Dark2") +
theme_minimal()
car_alluvia |>
ggplot(aes(y = frequency, axis1 = college, axis2 = type1, axis3=choice)) +
geom_alluvium(aes(fill = college), width = 1/12, color = "black") +
geom_stratum(width = 1/3, fill = "black", color = "grey") +
geom_text(stat = "stratum", aes(label = after_stat(stratum)), color = "white", size = 3) +
scale_x_discrete(limits = c("College", "Type 1", "Choice"), expand = c(.05, .05)) +
scale_fill_brewer(type = "qual", palette = "Dark2") +
theme_minimal()
library(knitr)
library(tidyverse)
library(discrtr) # A companion package for the book Introduction to Discrete Choice Analysis with `R`
library(dplyr) # A Grammar of Data Manipulation
library(ggplot2) # Create Elegant Data Visualisations Using the Grammar of Graphics
library(mlogit) # Multinomial Logit Models
library(readr) # Read Rectangular Text Data
#library(stargazer) # Well-Formatted Regression and Summary Statistics Tables
library(gplots) # Various R Programming Tools for Plotting Data
library(ggmosaic) # Mosaic Plots in the 'ggplot2' Framework
library(treemapify)
library(ggridges)
library(ggalluvial)
library(evd)
library(htmlwidgets) # HTML Widgets for R
library(kableExtra) # Construct Complex Table with kable and Pipe Syntax
library(plotly) # Create interactive web graphics
library(tidyr) # Tidy messy data
library(webshot2) # Take screenshots of web pages
data("mc_commute_wide", package = "discrtr")
summary(data)
data("mc_commute_wide", package = "discrtr")
summary(mc_commute_wide)
View(mc_commute_wide)
?mc_commute_wide
f2 <- mFormula(choice ~ time | sidewalk_density)
f2 |>  model.matrix(example_long)
library(knitr)
library(tidyverse)
library(discrtr) # A companion package for the book Introduction to Discrete Choice Analysis with `R`
library(dplyr) # A Grammar of Data Manipulation
library(ggplot2) # Create Elegant Data Visualisations Using the Grammar of Graphics
library(mlogit) # Multinomial Logit Models
library(readr) # Read Rectangular Text Data
#library(stargazer) # Well-Formatted Regression and Summary Statistics Tables
library(gplots) # Various R Programming Tools for Plotting Data
library(ggmosaic) # Mosaic Plots in the 'ggplot2' Framework
library(treemapify)
library(ggridges)
library(ggalluvial)
library(evd)
library(htmlwidgets) # HTML Widgets for R
library(kableExtra) # Construct Complex Table with kable and Pipe Syntax
library(plotly) # Create interactive web graphics
library(tidyr) # Tidy messy data
library(webshot2) # Take screenshots of web pages
data("mc_commute_wide", package = "discrtr")
mc_commute_wide[1:6, 1:10]
example_wide <- mc_commute_wide %>% dplyr::select(id, choice, starts_with("time")) |>
filter(id %in% c(566910139, 566873140, 566872636))
example_wide
example_wide |>  pivot_longer(cols = starts_with("time."), names_prefix = "time.", names_to="alternative", values_to="time")
example_long <- mc_commute_wide %>% filter(id %in% c(566910139, 566873140, 566872636)) |>
mlogit.data(shape="wide", choice="choice", varying=3:22)
data.frame(example_long) |>  dplyr::select(id, choice, alt, starts_with("time"), idx)
data.frame(example_long$idx)
f1 <- mFormula(choice ~ time)
f1 |> model.matrix(example_long)
f2 <- mFormula(choice ~ time | sidewalk_density)
f2 |>  model.matrix(example_long)
f3 <- mFormula(choice ~ 0 | sidewalk_density | time)
f3 |>  model.matrix(example_long)
# Function `mlogit()` is used to estimate logit models
# It needs a multi-part formula and a data set in long form
model3 <- mlogit(f3, mc_commute_long)
# Function `summary()` give the summary of data objects,
# including the output of model estimation algorithms
summary(model3)
