f<-function(t,y){
t*exp(3*t)-2*y
}
sol_aprox<-euler_heun(f, 0, 2,0,  n=10, improved=FALSE)
my_colors=c("y(x)"="firebrick", "w(x)"="dodgerblue")
ggplot()+
geom_function(aes(color="y(x)"),fun=y_sol, xlim=c(0,2))+
geom_line(aes(sol_aprox$t,sol_aprox$y, color="w(x)"))+
#geom_point(aes(sol_aprox$T,sol_aprox$W), color="green", size=3)+
scale_color_manual(values=my_colors)+
labs(x="t", y="y(t)", color=" ")+
theme_bw()
y_sol<- function(t){
1/25*exp(-2*t)+1/5*t*exp(3*t)-2*y
}
f<-function(t,y){
t*exp(3*t)-2*y
}
sol_aprox<-euler_heun(f, 0, 2,0,  n=10, improved=FALSE)
my_colors=c("y(x)"="firebrick", "w(x)"="dodgerblue")
ggplot()+
geom_function(aes(color="y(x)"),fun=y_sol, xlim=c(0,2))+
geom_line(aes(sol_aprox$t,sol_aprox$y, color="w(x)"))+
#geom_point(aes(sol_aprox$t,sol_aprox$W), color="green", size=3)+
scale_color_manual(values=my_colors)+
labs(x="t", y="y(t)", color=" ")+
theme_bw()
y_sol<- function(t){
1/25*exp(-2*t)+1/5*t*exp(3*t)-2*y
}
f<-function(t,y){
t*exp(3*t)-2*y
}
sol_aprox<-euler_heun(f, 0, 2,0,  n=10, improved=FALSE)
my_colors=c("y(x)"="firebrick", "w(x)"="dodgerblue")
ggplot()+
geom_function(aes(color="y(x)"),fun=y_sol, xlim=c(0,2))+
geom_line(aes(sol_aprox$t,sol_aprox$y, color="w(x)"))+
#geom_point(aes(sol_aprox$t,sol_aprox$y), color="green", size=3)+
scale_color_manual(values=my_colors)+
labs(x="t", y="y(t)", color=" ")+
theme_bw()
y_sol<- function(t){
1/25*exp(-2*t)+1/5*t*exp(3*t)-1/25*exp(3*t)
}
f<-function(t,y){
t*exp(3*t)-2*y
}
sol_aprox<-euler_heun(f, 0, 2,0,  n=10, improved=FALSE)
my_colors=c("y(x)"="firebrick", "w(x)"="dodgerblue")
ggplot()+
geom_function(aes(color="y(x)"),fun=y_sol, xlim=c(0,2))+
geom_line(aes(sol_aprox$t,sol_aprox$y, color="w(x)"))+
#geom_point(aes(sol_aprox$t,sol_aprox$y), color="green", size=3)+
scale_color_manual(values=my_colors)+
labs(x="t", y="y(t)", color=" ")+
theme_bw()
error_real<- y_sol(sol_aprox$t)-sol_aprox$y
M<- 3*exp(6)+4*abs(max(sol_aprox$y))
L<-2
h<-0.2
cota<-h*M/(2*L)*(exp(L*(sol_aprox$t))-1)
graf_error<-ggplot()+
geom_line(aes(sol_aprox$T, error_real), color="red")+
geom_point(aes(sol_aprox$T, error_real), color="blue")+
geom_line(aes(sol_aprox$T, cota), color="green")+
theme_bw()
ggplotly(graf_error)
error_real<- y_sol(sol_aprox$t)-sol_aprox$y
M<- 3*exp(6)+4*abs(max(sol_aprox$y))
L<-2
h<-0.2
cota<-h*M/(2*L)*(exp(L*(sol_aprox$t))-1)
graf_error<-ggplot()+
geom_line(aes(sol_aprox$t, error_real), color="red")+
geom_point(aes(sol_aprox$t, error_real), color="blue")+
geom_line(aes(sol_aprox$t, cota), color="green")+
theme_bw()
ggplotly(graf_error)
library(knitr)
library(tidyverse)
library(discrtr) # A companion package for the book Introduction to Discrete Choice Analysis with `R`
library(dplyr) # A Grammar of Data Manipulation
library(ggplot2) # Create Elegant Data Visualisations Using the Grammar of Graphics
library(mlogit) # Multinomial Logit Models
library(readr) # Read Rectangular Text Data
#library(stargazer) # Well-Formatted Regression and Summary Statistics Tables
library(gplots) # Various R Programming Tools for Plotting Data
library(ggmosaic) # Mosaic Plots in the 'ggplot2' Framework
library(treemapify)
library(ggridges)
library(ggalluvial)
library(evd)
library(htmlwidgets) # HTML Widgets for R
library(kableExtra) # Construct Complex Table with kable and Pipe Syntax
library(plotly) # Create interactive web graphics
library(tidyr) # Tidy messy data
library(webshot2) # Take screenshots of web pages
data("mc_commute_wide", package = "discrtr")
summary(mc_commute_wide)
example_long <- mc_commute_wide %>% filter(id %in% c(566910139, 566873140, 566872636)) |>
mlogit.data(shape="wide", choice="choice", varying=3:22)
summary(mc_commute_long$sidewalk_density)
mc_commute_predict <- mc_commute_long[1:52, ]
mc_commute_predict$sidewalk_density <- rep(seq(from=0, to=60, by=5), each=4)
mc_commute_predict |>  data.frame() |>  select(sidewalk_density) |>  slice_head(n=10)
mc_commute_predict$time <- c(20, 30, 40)
mc_commute_predict$time <- rep(c(20, 30, 40), each = 52/3)
times <- c(20, 30, 40)
probabilities <- rep(0, length(times))
for (i in 1:length(times)) {
mc_commute_predict$time <- times[i]
probabilities[i] <- predict(model2, newdata = mc_commute_predict, type = "response")
}
model2 <- mlogit(f2, mc_commute_long)
mc_commute_long <- mc_commute_wide |>
mlogit.data(shape="wide",
# Name of column with the choices
choice = "choice",
# Numbers of columns with attributes that vary by alternative
varying = 3:22)
class(f2)
f2 <- mFormula(choice ~ time | sidewalk_density)
f2 |>  model.matrix(example_long)
class(f2)
model2 <- mlogit(f2, mc_commute_long)
summary(model2)
summary(mc_commute_long$sidewalk_density)
mc_commute_predict <- mc_commute_long[1:52, ]
mc_commute_predict$sidewalk_density <- rep(seq(from=0, to=60, by=5), each=4)
mc_commute_predict |>  data.frame() |>  select(sidewalk_density) |>  slice_head(n=10)
times <- c(20, 30, 40)
probabilities <- rep(0, length(times))
for (i in 1:length(times)) {
mc_commute_predict$time <- times[i]
probabilities[i] <- predict(model2, newdata = mc_commute_predict, type = "response")
}
probabilities
mc_commute_predict %>% data.frame() %>% select(time, sidewalk_density) %>% summary()
probs <- predict(model2, newdata=mc_commute_predict)
print(probs)
library(knitr)
library(tidyverse)
library(discrtr) # A companion package for the book Introduction to Discrete Choice Analysis with `R`
library(dplyr) # A Grammar of Data Manipulation
library(ggplot2) # Create Elegant Data Visualisations Using the Grammar of Graphics
library(mlogit) # Multinomial Logit Models
library(readr) # Read Rectangular Text Data
#library(stargazer) # Well-Formatted Regression and Summary Statistics Tables
library(gplots) # Various R Programming Tools for Plotting Data
library(ggmosaic) # Mosaic Plots in the 'ggplot2' Framework
library(treemapify)
library(ggridges)
library(ggalluvial)
library(evd)
library(htmlwidgets) # HTML Widgets for R
library(kableExtra) # Construct Complex Table with kable and Pipe Syntax
library(plotly) # Create interactive web graphics
library(tidyr) # Tidy messy data
library(webshot2) # Take screenshots of web pages
data("mc_commute_wide", package = "discrtr")
summary(mc_commute_wide)
example_long <- mc_commute_wide %>% filter(id %in% c(566910139, 566873140, 566872636)) |>
mlogit.data(shape="wide", choice="choice", varying=3:22)
mc_commute_long <- mc_commute_wide |>
mlogit.data(shape="wide",
# Name of column with the choices
choice = "choice",
# Numbers of columns with attributes that vary by alternative
varying = 3:22)
f2 <- mFormula(choice ~ time | sidewalk_density)
f2 |>  model.matrix(example_long)
class(f2)
model2 <- mlogit(f2, mc_commute_long)
summary(model2)
summary(mc_commute_long$sidewalk_density)
mc_commute_predict <- mc_commute_long[1:52, ]
mc_commute_predict$sidewalk_density <- rep(seq(from=0, to=60, by=5), each=4)
mc_commute_predict |>  data.frame() |>  select(sidewalk_density) |>  slice_head(n=10)
mc_commute_predict$time <- 20
mc_commute_predict %>% data.frame() %>% select(time, sidewalk_density) %>% summary()
probs <- predict(model2, newdata=mc_commute_predict)
print(probs)
mc_commute_predict$time <- 30
mc_commute_predict %>% data.frame() %>% select(time, sidewalk_density) %>% summary()
probs <- predict(model2, newdata=mc_commute_predict)
print(probs)
mc_commute_predict$time <- 40
mc_commute_predict %>% data.frame() %>% select(time, sidewalk_density) %>% summary()
probs <- predict(model2, newdata=mc_commute_predict)
print(probs)
mc_commute_predict$time <- 40
mc_commute_predict %>% data.frame() %>% select(time, sidewalk_density) %>% summary()
probs <- predict(model2, newdata=mc_commute_predict)
print(probs)
summary(model2)
mc_commute_predict$time <- 10
mc_commute_predict %>% data.frame() %>% select(time, sidewalk_density) %>% summary()
probs <- predict(model2, newdata=mc_commute_predict)
print(probs)
mc_commute_long <- mc_commute_wide |>
mlogit.data(shape="wide",
# Name of column with the choices
choice = "choice",
# Numbers of columns with attributes that vary by alternative
varying = 3:22)
f2 <- mFormula(choice ~ time | sidewalk_density)
f2 |>  model.matrix(example_long)
f2 <- mFormula(choice ~ time | sidewalk_density)
f2 |>  model.matrix(example_long)
library(knitr)
library(tidyverse)
library(discrtr) # A companion package for the book Introduction to Discrete Choice Analysis with `R`
library(dplyr) # A Grammar of Data Manipulation
library(ggplot2) # Create Elegant Data Visualisations Using the Grammar of Graphics
library(mlogit) # Multinomial Logit Models
library(readr) # Read Rectangular Text Data
#library(stargazer) # Well-Formatted Regression and Summary Statistics Tables
library(gplots) # Various R Programming Tools for Plotting Data
library(ggmosaic) # Mosaic Plots in the 'ggplot2' Framework
library(treemapify)
library(ggridges)
library(ggalluvial)
library(evd)
library(htmlwidgets) # HTML Widgets for R
library(kableExtra) # Construct Complex Table with kable and Pipe Syntax
library(plotly) # Create interactive web graphics
library(tidyr) # Tidy messy data
library(webshot2) # Take screenshots of web pages
data("mc_commute_wide", package = "discrtr")
summary(mc_commute_wide)
example_long <- mc_commute_wide %>% filter(id %in% c(566910139, 566873140, 566872636)) |>
mlogit.data(shape="wide", choice="choice", varying=3:22)
mc_commute_long <- mc_commute_wide |>
mlogit.data(shape="wide",
# Name of column with the choices
choice = "choice",
# Numbers of columns with attributes that vary by alternative
varying = 3:22)
f2 <- mFormula(choice ~ time | sidewalk_density)
f2 |>  model.matrix(example_long)
class(f2)
model2 <- mlogit(f2, mc_commute_long)
summary(model2)
summary(mc_commute_long$sidewalk_density)
mc_commute_predict <- mc_commute_long[1:52, ]
mc_commute_predict$sidewalk_density <- rep(seq(from=0, to=60, by=5), each=4)
mc_commute_predict |>  data.frame() |>  select(sidewalk_density) |>  slice_head(n=10)
mc_commute_predict$time <- 20
mc_commute_predict %>% data.frame() %>% select(time, sidewalk_density) %>% summary()
probs <- predict(model2, newdata=mc_commute_predict)
print(probs)
mc_commute_predict$time <- 10
mc_commute_predict %>% data.frame() %>% select(time, sidewalk_density) %>% summary()
probs <- predict(model2, newdata=mc_commute_predict)
probs <- predict(model2, newdata=mc_commute_predict)
print(probs)
mc_commute_predict <- expand.grid(time = c(20, 30, 40), sidewalk_density = seq(from = 0, to = 60, by = 5))
mc_commute_predict %>% data.frame() %>% select(time, sidewalk_density) %>% summary()
probs <- predict(model2, newdata=mc_commute_predict)
# Cargar paquete necesario
library(mlogit)
# Definir el conjunto de datos mc_commute_long
mc_commute_long <- mc_commute_wide |>
mlogit.data(shape = "wide",
choice = "choice",
varying = 3:22)
# Crear un conjunto de datos de predicción con todas las combinaciones de tiempo y densidad de acera
mc_commute_predict <- expand.grid(time = c(20, 30, 40),
sidewalk_density = seq(from = 0, to = 60, by = 5))
# Verificar el resumen del conjunto de datos de predicción
summary(mc_commute_predict)
# Verificar que el número de filas sea un múltiplo del número de alternativas en el modelo
nrow(mc_commute_predict) %% length(unique(mc_commute_long$choice))
# Crear las predicciones de probabilidad
probs <- predict(model2, newdata = mc_commute_predict)
# Cargar paquete necesario
library(mlogit)
# Definir el conjunto de datos mc_commute_long
mc_commute_long <- mlogit.data(mc_commute_wide, shape = "wide", choice = "choice", varying = 3:22)
# Crear un conjunto de datos de predicción con todas las combinaciones de tiempo y densidad de acera
mc_commute_predict <- expand.grid(time = c(20, 30, 40), sidewalk_density = seq(from = 0, to = 60, by = 5))
# Verificar el resumen del conjunto de datos de predicción
summary(mc_commute_predict)
# Verificar que el número de filas sea un múltiplo del número de alternativas en el modelo
nrow(mc_commute_predict) %% length(unique(mc_commute_long$choice))
# Crear las predicciones de probabilidad
probs <- predict(model2, newdata = mc_commute_predict)
mc_commute_predict <- expand.grid(time = c(20, 30, 40), sidewalk_density = seq(from = 0, to = 60, by = 5))
mc_commute_predict$time <- 20
mc_commute_predict %>% data.frame() %>% select(time, sidewalk_density) %>% summary()
probs <- predict(model2, newdata=mc_commute_predict)
print(probs)
probs <- predict(model2, newdata=mc_commute_predict)
mc_commute_predict$time <- 20
mc_commute_predict %>% data.frame() %>% select(time, sidewalk_density) %>% summary()
probs <- predict(model2, newdata=mc_commute_predict)
mc_commute_long <- mc_commute_wide |>
mlogit.data(shape="wide",
# Name of column with the choices
choice = "choice",
# Numbers of columns with attributes that vary by alternative
varying = 3:22)
f2 <- mFormula(choice ~ time | sidewalk_density)
f2 |>  model.matrix(example_long)
library(knitr)
library(tidyverse)
library(discrtr) # A companion package for the book Introduction to Discrete Choice Analysis with `R`
library(dplyr) # A Grammar of Data Manipulation
library(ggplot2) # Create Elegant Data Visualisations Using the Grammar of Graphics
library(mlogit) # Multinomial Logit Models
library(readr) # Read Rectangular Text Data
#library(stargazer) # Well-Formatted Regression and Summary Statistics Tables
library(gplots) # Various R Programming Tools for Plotting Data
library(ggmosaic) # Mosaic Plots in the 'ggplot2' Framework
library(treemapify)
library(ggridges)
library(ggalluvial)
library(evd)
library(htmlwidgets) # HTML Widgets for R
library(kableExtra) # Construct Complex Table with kable and Pipe Syntax
library(plotly) # Create interactive web graphics
library(tidyr) # Tidy messy data
library(webshot2) # Take screenshots of web pages
data("mc_commute_wide", package = "discrtr")
summary(mc_commute_wide)
example_long <- mc_commute_wide %>% filter(id %in% c(566910139, 566873140, 566872636)) |>
mlogit.data(shape="wide", choice="choice", varying=3:22)
mc_commute_long <- mc_commute_wide |>
mlogit.data(shape="wide",
# Name of column with the choices
choice = "choice",
# Numbers of columns with attributes that vary by alternative
varying = 3:22)
f2 <- mFormula(choice ~ time | sidewalk_density)
f2 |>  model.matrix(example_long)
class(f2)
model2 <- mlogit(f2, mc_commute_long)
summary(model2)
summary(mc_commute_long$sidewalk_density)
mc_commute_predict <- mc_commute_long[1:52, ]
mc_commute_predict$sidewalk_density <- rep(seq(from=0, to=60, by=5), each=4)
mc_commute_predict |>  data.frame() |>  select(sidewalk_density) |>  slice_head(n=10)
mc_commute_predict <- expand.grid(time = c(20, 30, 40), sidewalk_density = seq(from = 0, to = 60, by = 5))
mc_commute_predict$time <- 20
mc_commute_predict %>% data.frame() %>% select(time, sidewalk_density) %>% summary()
probs <- predict(model2, newdata=mc_commute_predict)
median(mc_commute_predict$time, na.rm=TRUE)
library(knitr)
library(tidyverse)
library(discrtr) # A companion package for the book Introduction to Discrete Choice Analysis with `R`
library(dplyr) # A Grammar of Data Manipulation
library(ggplot2) # Create Elegant Data Visualisations Using the Grammar of Graphics
library(mlogit) # Multinomial Logit Models
library(readr) # Read Rectangular Text Data
#library(stargazer) # Well-Formatted Regression and Summary Statistics Tables
library(gplots) # Various R Programming Tools for Plotting Data
library(ggmosaic) # Mosaic Plots in the 'ggplot2' Framework
library(treemapify)
library(ggridges)
library(ggalluvial)
library(evd)
library(htmlwidgets) # HTML Widgets for R
library(kableExtra) # Construct Complex Table with kable and Pipe Syntax
library(plotly) # Create interactive web graphics
library(tidyr) # Tidy messy data
library(webshot2) # Take screenshots of web pages
data("mc_commute_wide", package = "discrtr")
summary(mc_commute_wide)
example_long <- mc_commute_wide %>% filter(id %in% c(566910139, 566873140, 566872636)) |>
mlogit.data(shape="wide", choice="choice", varying=3:22)
mc_commute_long <- mc_commute_wide |>
mlogit.data(shape="wide",
# Name of column with the choices
choice = "choice",
# Numbers of columns with attributes that vary by alternative
varying = 3:22)
f2 <- mFormula(choice ~ time | sidewalk_density)
f2 |>  model.matrix(example_long)
class(f2)
model2 <- mlogit(f2, mc_commute_long)
summary(model2)
summary(mc_commute_long$sidewalk_density)
mc_commute_predict <- mc_commute_long[1:52, ]
mc_commute_predict$sidewalk_density <- rep(seq(from=0, to=60, by=5), each=4)
mc_commute_predict |>  data.frame() |>  select(sidewalk_density) |>  slice_head(n=10)
median(mc_commute_predict$time, na.rm=TRUE)
mc_commute_predict$time <- 10
mc_commute_predict %>% data.frame() %>% select(time, sidewalk_density) %>% summary()
probs <- predict(model2, newdata=mc_commute_predict)
print(probs)
mc_commute_predict$time <- 10
mc_commute_predict %>% data.frame() %>% select(time, sidewalk_density) %>% summary()
probs <- predict(model2, newdata=mc_commute_predict)
print(probs)
# Se carga el paquete mlogit
library(mlogit)
# Se cargan los datos de ejemplo
data(mc_commute_long)
# Se estima el modelo mlogit original
model2 <- mlogit(choice ~ time | sidewalk_density, mc_commute_long)
# Se obtiene la mediana del tiempo de viaje
median_time <- median(mc_commute_long$time, na.rm = TRUE)
# Se crea un marco de datos para predecir probabilidades
mc_commute_predict <- mc_commute_long[1:52, ]
# Se establecen valores de tiempo de viaje
tiempos <- c(20, 30, 40)
# Se calcula la densidad media de la acera
mean_sidewalk_density <- mean(mc_commute_long$sidewalk_density)
# Se itera sobre los tiempos de viaje
for (tiempo in tiempos) {
# Se reemplaza el tiempo en el marco de datos predictivo
mc_commute_predict$time <- tiempo
# Se calculan las probabilidades
probs <- predict(model2, newdata = mc_commute_predict)
# Se imprimen los resultados
print(paste("Probabilidades para tiempo de viaje:", tiempo))
print(probs)
}
# Se carga el paquete mlogit
library(mlogit)
# Se cargan los datos de ejemplo
data(mc_commute_long)
# Se estima el modelo mlogit original
model2 <- mlogit(choice ~ time | sidewalk_density, mc_commute_long)
# Se obtiene la mediana del tiempo de viaje
median_time <- median(mc_commute_long$time, na.rm = TRUE)
# Se crea un marco de datos para predecir probabilidades
mc_commute_predict <- mc_commute_long[1:52, ]
# Se establecen valores de tiempo de viaje
tiempos <- c(10,20, 30, 40)
# Se calcula la densidad media de la acera
mean_sidewalk_density <- mean(mc_commute_long$sidewalk_density)
# Se itera sobre los tiempos de viaje
for (tiempo in tiempos) {
# Se reemplaza el tiempo en el marco de datos predictivo
mc_commute_predict$time <- tiempo
# Se calculan las probabilidades
probs <- predict(model2, newdata = mc_commute_predict)
# Se imprimen los resultados
print(paste("Probabilidades para tiempo de viaje:", tiempo))
print(probs)
}
# Se carga el paquete mlogit
library(mlogit)
# Se cargan los datos de ejemplo
data(mc_commute_long)
# Se estima el modelo mlogit original
model2 <- mlogit(choice ~ time | sidewalk_density, mc_commute_long)
# Se obtiene la mediana del tiempo de viaje
median_time <- median(mc_commute_long$time, na.rm = TRUE)
# Se crea un marco de datos para predecir probabilidades
mc_commute_predict <- mc_commute_long[1:52, ]
# Se establecen valores de tiempo de viaje
tiempos <- c(20, 30, 40)
# Se calcula la densidad media de la acera
mean_sidewalk_density <- mean(mc_commute_long$sidewalk_density)
# Se itera sobre los tiempos de viaje
for (tiempo in tiempos) {
# Se reemplaza el tiempo en el marco de datos predictivo
mc_commute_predict$time <- tiempo
# Se calculan las probabilidades
probs <- predict(model2, newdata = mc_commute_predict)
# Se imprimen los resultados
print(paste("Probabilidades para tiempo de viaje:", tiempo))
print(probs)
}
# Se crea un nuevo marco de datos para predecir probabilidades
mc_commute_predict <- mc_commute_long[1:52, ]
# Se establecen valores de tiempo de viaje
tiempos <- c(20, 30, 40)
# Se calcula la densidad media de la acera
mean_sidewalk_density <- mean(mc_commute_long$sidewalk_density)
# Se itera sobre los tiempos de viaje
for (tiempo in tiempos) {
# Se crea un nuevo marco de datos con la densidad media de la acera
mc_commute_predict_tmp <- mc_commute_predict
mc_commute_predict_tmp$sidewalk_density <- mean_sidewalk_density
# Se repite el tiempo de viaje dentro de cada nivel de densidad de la acera
mc_commute_predict_tmp <- mc_commute_predict_tmp %>%
group_by(sidewalk_density) %>%
mutate(time = rep(tiempo, n()))
# Se calculan las probabilidades
probs <- predict(model2, newdata = mc_commute_predict_tmp)
# Se imprimen los resultados
print(paste("Probabilidades para tiempo de viaje:", tiempo))
print(probs)
}
# Se establecen valores de tiempo de viaje
tiempos <- c(20, 30, 40)
# Se calcula la densidad media de la acera
mean_sidewalk_density <- mean(mc_commute_long$sidewalk_density)
# Se itera sobre los tiempos de viaje
for (tiempo in tiempos) {
# Se crea un nuevo marco de datos con la densidad media de la acera
mc_commute_predict_tmp <- mc_commute_predict
mc_commute_predict_tmp$sidewalk_density <- mean_sidewalk_density
# Se repite el tiempo de viaje dentro de cada nivel de densidad de la acera
mc_commute_predict_tmp <- mc_commute_predict_tmp %>%
group_by(sidewalk_density) %>%
mutate(time = rep(tiempo, n()))
# Se calculan las probabilidades
probs <- predict(model2, newdata = mc_commute_predict_tmp)
# Se imprimen los resultados
print(paste("Probabilidades para tiempo de viaje:", tiempo))
print(probs)
}
median(mc_commute_predict$time, na.rm=TRUE)
mc_commute_predict$time <- 10
mc_commute_predict %>% data.frame() %>% select(time, sidewalk_density) %>% summary()
probs <- predict(model2, newdata=mc_commute_predict)
print(probs)
