library(knitr)
library(tidyverse)
library(discrtr) # A companion package for the book Introduction to Discrete Choice Analysis with `R`
library(dplyr) # A Grammar of Data Manipulation
library(ggplot2) # Create Elegant Data Visualisations Using the Grammar of Graphics
library(mlogit) # Multinomial Logit Models
library(readr) # Read Rectangular Text Data
#library(stargazer) # Well-Formatted Regression and Summary Statistics Tables
library(gplots) # Various R Programming Tools for Plotting Data
library(ggmosaic) # Mosaic Plots in the 'ggplot2' Framework
library(treemapify)
library(ggridges)
library(ggalluvial)
library(evd)
library(htmlwidgets) # HTML Widgets for R
library(kableExtra) # Construct Complex Table with kable and Pipe Syntax
library(plotly) # Create interactive web graphics
library(tidyr) # Tidy messy data
library(webshot2) # Take screenshots of web pages
library(knitr)
library(tidyverse)
library(discrtr) # A companion package for the book Introduction to Discrete Choice Analysis with `R`
library(dplyr) # A Grammar of Data Manipulation
library(ggplot2) # Create Elegant Data Visualisations Using the Grammar of Graphics
library(mlogit) # Multinomial Logit Models
library(readr) # Read Rectangular Text Data
#library(stargazer) # Well-Formatted Regression and Summary Statistics Tables
library(gplots) # Various R Programming Tools for Plotting Data
library(ggmosaic) # Mosaic Plots in the 'ggplot2' Framework
library(treemapify)
library(ggridges)
library(ggalluvial)
library(evd)
library(htmlwidgets) # HTML Widgets for R
library(kableExtra) # Construct Complex Table with kable and Pipe Syntax
library(plotly) # Create interactive web graphics
library(tidyr) # Tidy messy data
library(webshot2) # Take screenshots of web pages
library(knitr)
library(tidyverse)
library(discrtr) # A companion package for the book Introduction to Discrete Choice Analysis with `R`
library(dplyr) # A Grammar of Data Manipulation
library(ggplot2) # Create Elegant Data Visualisations Using the Grammar of Graphics
library(mlogit) # Multinomial Logit Models
library(readr) # Read Rectangular Text Data
#library(stargazer) # Well-Formatted Regression and Summary Statistics Tables
library(gplots) # Various R Programming Tools for Plotting Data
library(ggmosaic) # Mosaic Plots in the 'ggplot2' Framework
library(treemapify)
library(ggridges)
library(ggalluvial)
library(evd)
library(htmlwidgets) # HTML Widgets for R
library(kableExtra) # Construct Complex Table with kable and Pipe Syntax
library(plotly) # Create interactive web graphics
library(tidyr) # Tidy messy data
library(webshot2) # Take screenshots of web pages
data("mc_commute_wide", package = "discrtr")
summary(mc_commute_wide)
f3 <- mFormula(choice ~ 0 | sidewalk_density | time)
f3 |>  model.matrix(example_long)
data("mc_commute_wide", package = "discrtr")
summary(mc_commute_wide)
f3 <- mFormula(choice ~ 0 | sidewalk_density | time)
f3 |>  model.matrix(example_long)
# Function `mlogit()` is used to estimate logit models
# It needs a multi-part formula and a data set in long form
model3 <- mlogit(f3, mc_commute_long)
# Function `summary()` give the summary of data objects,
# including the output of model estimation algorithms
summary(model3)
f3 <- mFormula(choice ~ 0 | sidewalk_density | time)
f3 |>  model.matrix(example_long)
f3 <- mFormula(choice ~ 0 | sidewalk_density | time)
f3 %>% model.matrix(example_long)
example_long <- mc_commute_wide %>% filter(id %in% c(566910139, 566873140, 566872636)) |>
mlogit.data(shape="wide", choice="choice", varying=3:22)
f3 <- mFormula(choice ~ 0 | sidewalk_density | time)
f3 |>  model.matrix(example_long)
# Function `mlogit()` is used to estimate logit models
# It needs a multi-part formula and a data set in long form
model3 <- mlogit(f3, mc_commute_long)
# Function `summary()` give the summary of data objects,
# including the output of model estimation algorithms
summary(model3)
median(mc_commute_predict$time, na.rm=TRUE)
library(knitr)
library(tidyverse)
library(discrtr) # A companion package for the book Introduction to Discrete Choice Analysis with `R`
library(dplyr) # A Grammar of Data Manipulation
library(ggplot2) # Create Elegant Data Visualisations Using the Grammar of Graphics
library(mlogit) # Multinomial Logit Models
library(readr) # Read Rectangular Text Data
#library(stargazer) # Well-Formatted Regression and Summary Statistics Tables
library(gplots) # Various R Programming Tools for Plotting Data
library(ggmosaic) # Mosaic Plots in the 'ggplot2' Framework
library(treemapify)
library(ggridges)
library(ggalluvial)
library(evd)
library(htmlwidgets) # HTML Widgets for R
library(kableExtra) # Construct Complex Table with kable and Pipe Syntax
library(plotly) # Create interactive web graphics
library(tidyr) # Tidy messy data
library(webshot2) # Take screenshots of web pages
data("mc_commute_wide", package = "discrtr")
summary(mc_commute_wide)
example_long <- mc_commute_wide %>% filter(id %in% c(566910139, 566873140, 566872636)) |>
mlogit.data(shape="wide", choice="choice", varying=3:22)
mc_commute_long <- mc_commute_wide |>
mlogit.data(shape="wide",
# Name of column with the choices
choice = "choice",
# Numbers of columns with attributes that vary by alternative
varying = 3:22)
f2 <- mFormula(choice ~ time | sidewalk_density)
f2 |>  model.matrix(example_long)
class(f2)
model2 <- mlogit(f2, mc_commute_long)
summary(model2)
summary(mc_commute_long$sidewalk_density)
mc_commute_predict <- mc_commute_long[1:52, ]
mc_commute_predict$sidewalk_density <- rep(seq(from=0, to=60, by=5), each=4)
mc_commute_predict |>  data.frame() |>  select(sidewalk_density) |>  slice_head(n=10)
median(mc_commute_predict$time, na.rm=TRUE)
mc_commute_predict$time <- 10
mc_commute_predict %>% data.frame() %>% select(time, sidewalk_density) %>% summary()
probs <- predict(model2, newdata=mc_commute_predict)
print(probs)
View(probs)
View(model2)
View(probs)
View(probs)
View(model2)
View(mc_commute_wide)
View(mc_commute_wide)
View(mc_commute_predict)
View(mc_commute_long)
View(example_long)
mc_commute_predict$time <- 10
mc_commute_predict %>% data.frame() %>% select(time, sidewalk_density) %>% summary()
probs <- predict(model2, newdata=mc_commute_predict)
print(probs)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(tidyverse)
library(pracma)
mc_commute_long <- mc_commute_wide |>
mlogit.data(shape="wide",
# Name of column with the choices
choice = "choice",
# Numbers of columns with attributes that vary by alternative
varying = 3:22)
class(f1)
class(f2)
class(f3)
data("mc_commute_wide", package = "discrtr")
mc_commute_wide[1:6, 1:10]
example_wide <- mc_commute_wide %>% dplyr::select(id, choice, starts_with("time")) |>
filter(id %in% c(566910139, 566873140, 566872636))
example_wide
example_wide |>  pivot_longer(cols = starts_with("time."), names_prefix = "time.", names_to="alternative", values_to="time")
example_long <- mc_commute_wide %>% filter(id %in% c(566910139, 566873140, 566872636)) |>
mlogit.data(shape="wide", choice="choice", varying=3:22)
data.frame(example_long) |>  dplyr::select(id, choice, alt, starts_with("time"), idx)
data.frame(example_long$idx)
f1 <- mFormula(choice ~ time)
f1 |> model.matrix(example_long)
f2 <- mFormula(choice ~ time | sidewalk_density)
f2 |>  model.matrix(example_long)
f3 <- mFormula(choice ~ 0 | sidewalk_density | time)
f3 |>  model.matrix(example_long)
mc_commute_long <- mc_commute_wide |>
mlogit.data(shape="wide",
# Name of column with the choices
choice = "choice",
# Numbers of columns with attributes that vary by alternative
varying = 3:22)
# Function `mlogit()` is used to estimate logit models
# It needs a multi-part formula and a data set in long form
model1 <- mlogit(f1, mc_commute_long)
# Function `summary()` give the summary of data objects,
# including the output of model estimation algorithms
summary(model1)
# Function `mlogit()` is used to estimate logit models
# It needs a multi-part formula and a data set in long form
model2 <- mlogit(f2, mc_commute_long, relevel="walk")
# Function `summary()` give the summary of data objects,
# including the output of model estimation algorithms
summary(model2)
mc_commute_long <- mc_commute_wide |>
mlogit.data(shape="wide",
# Name of column with the choices
choice = "choice",
# Numbers of columns with attributes that vary by alternative
varying = 3:22)
class(f1)
class(f2)
class(f3)
# Function `mlogit()` is used to estimate logit models
# It needs a multi-part formula and a data set in long form
model1 <- mlogit(f1, mc_commute_long)
# Function `summary()` give the summary of data objects,
# including the output of model estimation algorithms
summary(model1)
model2 <- mlogit(f2, mc_commute_long)
summary(model2)
model2 <- mlogit(f2, mc_commute_long, reflevel = "Walk")
summary(model2)
summary(mc_commute_long$sidewalk_density)
mc_commute_predict <- mc_commute_long[1:52, ]
mc_commute_predict$sidewalk_density <- rep(seq(from=0, to=60, by=5), each=4)
mc_commute_predict |>  data.frame() |>  select(sidewalk_density) |>  slice_head(n=10)
median(mc_commute_predict$time)
median(mc_commute_predict$time, na.rm=TRUE)
mc_commute_predict$time <- 40
mc_commute_predict$time <- 10
mc_commute_predict %>% data.frame() %>% select(time, sidewalk_density) %>% summary()
probs <- predict(model2, newdata=mc_commute_predict)
print(probs)
1<-mc_commute_predict$time <- 10
mc_commute_predict$time <- 10
mc_commute_predict %>% data.frame() %>% select(time, sidewalk_density) %>% summary()
probs <- predict(model2, newdata=mc_commute_predict)
print(probs)
median(mc_commute_predict$time, na.rm=TRUE)
mc_commute_predict$time <- 10
mc_commute_predict %>% data.frame() %>% select(time, sidewalk_density) %>% summary()
probs <- predict(model2, newdata=mc_commute_predict)
print(probs)
# Se crea un marco de datos para predecir probabilidades
mc_commute_predict <- mc_commute_long[1:52, ]
# Se establecen valores de tiempo de viaje
tiempos <- c(10,20, 30, 40)
# Se calcula la densidad media de la acera
mean_sidewalk_density <- mean(mc_commute_long$sidewalk_density)
# Se itera sobre los tiempos de viaje
for (tiempo in tiempos) {
# Se reemplaza el tiempo en el marco de datos predictivo
mc_commute_predict$time <- tiempo
# Se calculan las probabilidades
probs <- predict(model2, newdata = mc_commute_predict)
# Se imprimen los resultados
print(paste("Probabilidades para tiempo de viaje:", tiempo))
print(probs)
}
class(f3)
f3 <- mFormula(choice ~ 0 | sidewalk_density | time)
f3 |>  model.matrix(example_long)
# Function `mlogit()` is used to estimate logit models
# It needs a multi-part formula and a data set in long form
model3 <- mlogit(f3, mc_commute_long)
# Function `summary()` give the summary of data objects,
# including the output of model estimation algorithms
summary(model3)
probs <- predict(model3, newdata=mc_commute_predict)
print(probs)
# Se crea un marco de datos para predecir probabilidades
mc_commute_predict <- mc_commute_long[1:52, ]
# Se establecen valores de tiempo de viaje
tiempos <- c(10,20, 30, 40)
# Se calcula la densidad media de la acera
mean_sidewalk_density <- mean(mc_commute_long$sidewalk_density)
# Se itera sobre los tiempos de viaje
for (tiempo in tiempos) {
# Se reemplaza el tiempo en el marco de datos predictivo
mc_commute_predict$time <- tiempo
# Se calculan las probabilidades
probs <- predict(model3, newdata = mc_commute_predict)
# Se imprimen los resultados
print(paste("Probabilidades para tiempo de viaje:", tiempo))
print(probs)
}
f2 <- mFormula(choice ~ 1)
model2 <- mlogit(f2, mc_commute_long)
summary(model2)
f2 <- mFormula(choice ~ 2)
model2 <- mlogit(f2, mc_commute_long)
f0 <- mFormula(choice ~ 1)
model0 <- mlogit(f0, mc_commute_long)
summary(model0)
1-as.numeric(model2$logLik)/as.numeric(model0$logLik)
1-as.numeric(model3$logLik)/as.numeric(model0$logLik)
lrtest(model2, model3)
