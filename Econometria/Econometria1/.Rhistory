y = "Frecuencia") +
# Personalizar el tema del gráfico (opcional)
theme_minimal()
ggplot(Tabla_F, aes(x = a)) +
geom_histogram(bins = , fill = "white", color = "black", alpha = 0.7) +
# Agregar una línea de frecuencia poligonal (geom_freqpoly)
geom_freqpoly(bins = 12, color = "red") +
# Añadir etiquetas y título
labs(title = "Histograma con Frecuencia Poligonal",
x = "Valores",
y = "Frecuencia") +
# Personalizar el tema del gráfico (opcional)
theme_minimal()
library(readxl)
ejercicio_6 <- read_excel("D:/ejercicio 6.xlsx",
sheet = "E-17")
View(ejercicio_6)
names(ejercicio_6)
ejercicio_6$18.2
library(readxl)
ejercicio_6 <- read_excel("D:/ejercicio 6.xlsx",
sheet = "E-17")
View(ejercicio_6)
names(ejercicio_6)
ejercicio_6$shrinkage
as.data.frame(table(ejercicio_6$shrinkage))
Tabla_Fr<-as.data.frame(table(ejercicio_6$18.2))
Tabla_Fr
names(ejercicio_6)
ejercicio_6$shrinkage
as.data.frame(table(ejercicio_6$shrinkage))
Tabla_Fr<-as.data.frame(table(ejercicio_6$shrinkage))
transform(Tabla_Fr, FreqAcum=cumsum(Tabla_Fr$Freq),
Rel=round(prop.table(Tabla_Fr$Freq),3),
RelAcum=round(cumsum(prop.table(Tabla_Fr$Freq)),3))
Tabla_Fa<-as.data.frame(transform(Tabla_Fr, FreqAcum=cumsum(Tabla_Fr$Freq),
Rel=round(prop.table(Tabla_Fr$Freq),3),
RelAcum=round(cumsum(prop.table(Tabla_Fr$Freq)),3))
ggplot(ejercicio_6, aes(x = shrinkage)) +
ggplot(ejercicio_6, aes(x = shrinkage)) +
geom_histogram(bins = nrow(9), fill = "white", color = "black", alpha = 0.7) +
geom_freqpoly(bins=nrow(9),color="red")
ggplot(ejercicio_6, aes(x = shrinkage)) +
geom_histogram(bins = nrow(3), fill = "white", color = "black", alpha = 0.7) +
geom_freqpoly(bins=nrow(9),color="red")
ggplot(ejercicio_6, aes(x = shrinkage)) +
geom_histogram(, fill = "white", color = "black", alpha = 0.7) +
geom_freqpoly(bins=nrow(9),color="red")
ggplot(ejercicio_6, aes(x = shrinkage)) +
geom_histogram(bins = nrow(2), fill = "white", color = "black", alpha = 0.7)
# Crear un histograma
ggplot(ejercicio_6, aes(x = shrinkage)) +
geom_histogram(bins = 10, fill = "white", color = "black", alpha = 0.7) +
# Añadir etiquetas y título
labs(title = "Histograma de Shrinkage",
x = "Shrinkage",
y = "Frecuencia") +
# Personalizar el tema del gráfico (opcional)
theme_minimal()
A<- as.numeric(ejercicio_6$shrinkage)
stem(A)
ggplot(ejercicio_6, aes(x = shrinkage)) +
geom_histogram(bins = 12, fill = "white", color = "black", alpha = 0.7) +
# Añadir etiquetas y título
labs(title = "Histograma de Shrinkage",
x = "Shrinkage",
y = "Frecuencia") +
# Personalizar el tema del gráfico (opcional)
theme_minimal()
scan()<-a
scan()<- b
scan()->b
scan()->b
as.numeric(92, 85, 92, 74, 88,
85, 69, 68, 70, 80,
77, 80, 94, 94, 93,
98, 88, 91, 65, 65,
68, 96, 76, 82, 84,
75, 78, 69, 60, 89,
86, 91, 88)
b<-as.numeric(92, 85, 92, 74, 88,
85, 69, 68, 70, 80,
77, 80, 94, 94, 93,
98, 88, 91, 65, 65,
68, 96, 76, 82, 84,
75, 78, 69, 60, 89,
86, 91, 88)
b<-as.list(92, 85, 92, 74, 88,
85, 69, 68, 70, 80,
77, 80, 94, 94, 93,
98, 88, 91, 65, 65,
68, 96, 76, 82, 84,
75, 78, 69, 60, 89,
86, 91, 88)
quantile(b)
library(readxl)
ejercicio_6 <- read_excel("D:/ejercicio 6.xlsx",
sheet = "E-30")
View(ejercicio_6)
names(ejercicio_6)
names(ejercicio_6)
plot(Altura ~ salario, main="Diagrama de disperción",
xlab="Altura", ylab="salario")
plot(ejercicio_6$Altura, ejercicio_6$Salario, main="Diagrama de disperción",
xlab="Altura", ylab="salario")
plot(ejercicio_6$Altura, ejercicio_6$Salario, main="Diagrama de \disperción",
plot(ejercicio_6$Altura, ejercicio_6$Salario, main="Diagrama de /disperción",
xlab="Altura", ylab="salario")
#para crear una linea de regresión
abline(lm(ejercicio_6$Altura, ejercicio_6$Salario))
abline(lm(ejercicio_6$Altura, ejercicio_6$Salario))
plot(ejercicio_6$Altura, ejercicio_6$Salario, main="Diagrama de disperción",
xlab="Altura", ylab="salario")
#para crear una linea de regresión
abline(lm(Altura ~ Salario, data = ejercicio_6))
names(ejercicio_6)
plot(ejercicio_6$Altura, ejercicio_6$Salario, main="Diagrama de disperción",
xlab="Altura", ylab="salario")
#para crear una linea de regresión
abline(lm(Altura ~ Salario, data = ejercicio_6))
abline(lm(Altura ~ salario, data = ejercicio_6))
names(ejercicio_6)
abline(lm(Altura ~ salario, data = ejercicio_6))
abline(lm(Altura ~ Salario, data = ejercicio_6))
abline(lm(Altura ~ Salario))
abline(modelo, col = "red")
modelo <- lm(Altura ~ Salario, data = ejercicio_6)
abline(modelo, col = "red")
plot(ejercicio_6$Altura, ejercicio_6$Salario, main="Diagrama de disperción",
xlab="Altura", ylab="salario")
modelo <- lm(Altura ~ salario, data = ejercicio_6)
modelo <- lm(ejercicio_6$Altura, ejercicio_6$salario)
modelo <- lm(ejercicio_6$Altura, ejercicio_6$Salario)
str(ejercicio_6)
names(ejercicio_6)
modelo <- lm(ejercicio_6$Altura, ejercicio_6$Salario)
modelo <- lm(Altura ~ Salario, data = ejercicio_6)
abline(modelo, col = "red")
install.packages("psych")
pairs.panels(airquality[c(1,2)])
library(psych)
pairs.panels(airquality[c(1,2)])
cor(ejercicio_6$Altura, ejercicio_6$Salario)
names(ejercicio_6)
plot(ejercicio_6$Altura, ejercicio_6$Salario, main="Diagrama de disperción",
xlab="Altura", ylab="salario")
cor(ejercicio_6$Altura, ejercicio_6$Salario)
install.packages("tidyverse")
ggplot()
library(tydyverse)
library(tidyverse)
detach("package:tibble", unload = TRUE)
library(tydyverse)
ggplot()+
geom_function(fun=f)
library(tydyverse)
install.packages("ggplotlyExtra")
library(tydyverse)
install.packages("tydyverse")
library(tidyverse)
f <- function(x) {x^3 - 4*x^2 - 10}
ggplot() +
geom_function(fun = f)
# Aquí falta la asignación de ggplot() a la variable m
m <- ggplot() +
geom_function(fun = f)
ggplotly(m)
names(ejercicio_6)
plot(ejercicio_6$Altura, ejercicio_6$Salario, main="Diagrama de disperción",
xlab="Altura", ylab="salario")
cor(ejercicio_6$Altura, ejercicio_6$Salario)
print(desviacion_estandar_columna_A)
# Imprimir los resultados
datos <- c(230,250,245,258,265,240)
# Calcular la varianza muestral
varianza_muestral <- var(datos)
# Imprimir el resultado
print(varianza_muestral)
library(tidyverse)
f <- function(x) {x^3 - 4*x^2 - 10}
ggplot() +
geom_function(fun = f)
# Aquí falta la asignación de ggplot() a la variable m
m <- ggplot() +
geom_function(fun = f)
ggplotly(m)
# Imprimir los resultados
# Crear un marco de datos de ejemplo
df <- data.frame(A = c(230,250,245,258,265,240), B = c(190))
# Calcular la varianza muestral para cada columna
varianza_muestral_columna_A <- var(df$A)
varianza_muestral_columna_B <- var(df$B)
# Imprimir los resultados
print(varianza_muestral_columna_A)
print(varianza_muestral_columna_B)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(tidyverse)
library(pracma)
library(plotly)
f<- function(x){exp(x)}
my_colors<-c("f(x)"="deeppink")
x0<-0
x1<-3
Lo<-function(x){x-x1/(x0-x1)}
L1<-function(x){(x-x0)/(x1-x0)}
pol_L <- funtion(x){L0(x)*f(x0)+L1(x)*f(x1)}
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(tidyverse)
library(discrtr) # A companion package for the book Introduction to Discrete Choice Analysis with `R`
library(mlogit) # Multinomial Logit Models
library(readr) # Read Rectangular Text Data
var_num<- names(Mode)[-1]
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(tidyverse)
library(discrtr) # A companion package for the book Introduction to Discrete Choice Analysis with `R`
library(mlogit) # Multinomial Logit Models
library(readr) # Read Rectangular Text Data
data("Mode")
glimpse(Mode)
table(Mode$choice)
summary(Mode$choice)
ggplot(Mode)+
geom_bar(aes(choice), color="black", fill="#566AAA")+
theme_bw()
summary(Mode)
ggplot(Mode)+
geom_density(aes(cost.car), color="black", fill="blue", alpha=0.6)+
geom_density(aes(cost.carpool), color="black", fill="red", alpha=0.6)+
geom_density(aes(cost.bus), color="black", fill="orange", alpha=0.6)+
geom_density(aes(cost.rail), color="black", fill="gold3", alpha=0.6)+
theme_bw()
ggplot(Mode)+
geom_density(aes(time.car), color="black", fill="blue", alpha=0.4)+
geom_density(aes(time.carpool), color="black", fill="red", alpha=0.4)+
geom_density(aes(time.bus), color="black", fill="brown", alpha=0.4)+
geom_density(aes(time.rail), color="black", fill="gold3", alpha=0.4)+
theme_bw()
ggplot(Mode)+
geom_boxplot(aes(choice, eval(as.name(k))))
var_num<- names(Mode)[-1]
for (k in var_num) {
graf<-ggplot(Mode)+
geom_boxplot(aes(choice, eval(as.name(k)), fill=choice),
show.legend= FALSE)+ ylab(k)+
theme_bw()
print(graf)
}
install.packages("MASS")
install.packages("ISLR2")
install.packages("car")
install.packages("corrplot")
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(ISLR2)
library(car)
library(corrplot)
library(MASS)
library(ISLR2)
library(car)
library(corrplot)
data("Credit")
head(Credit)
data("Credit")
head(Credit)
glims(Credit)
data("Credit")
head(Credit)
glins(Credit)
?gims
data("Credit")
head(Credit)
glims(Credit)
data("Credit")
head(Credit)
glimse(Credit)
ggplot(Credit)+
geom_histogram(aes(Income, fill=student), color="black")+
scale_fill_manual(values=c("cyan", "red3"))+
teme_bw
NAMES(Credit)
names(Credit)
var_num<-dplyr::select(Credit, where(is.numeric))  > names()
var_num<-dplyr::select(Credit, where(is.numeric))  |> names()
comb_par<-t(combn(var_num,  2))
for (k in 1:21) {
grafica<-  ggplot(Credit)+
geom_point(aes(eval(as.name(comb_par[k,1])), eval(as.name(comb_par[k,1])),
color=Student), size=3)+
scale_color_manual(values=c("cyan", "red3")
labs(x=comb_par[k,1], y=omb_par[k,2])+
var_num<-dplyr::select(Credit, where(is.numeric))  |> names()
comb_par<-t(combn(var_num,  2))
for (k in 1:21) {
grafica<-  ggplot(Credit)+
geom_point(aes(eval(as.name(comb_par[k,1])), eval(as.name(comb_par[k,1])),
color=Student), size=3)+
geom_smothaes(eval(as.name(comb_par[k,1])), eval(as.name(comb_par[k,1])), linewidth=1.5, method="lm"
scale_color_manual(values=c("cyan", "red3")
data("Credit")
head(Credit)
sumary(Credit)
data("Credit")
head(Credit)
summary(Credit)
ggplot(Credit)+
geom_histogram(aes(Income, fill=Student), color="black")+
scale_fill_manual(values=c("cyan", "red3"))+
theme_bw()
ggplot(Credit)+
geom_histogram(aes(Income, fill=Student), color="black")+
scale_fill_manual(values=c("cyan", "red3"))+
theme_bw()
ggplot(Credit)+
geom_histogram(aes(Income, fill=Student), color="black")+
scale_fill_manual(values=c("cyan", "red3"))+
theme_bw()
ggplot(Credit, aes(x=Income, fill=Student)) +
geom_histogram(color="black") +
scale_fill_manual(values=c("cyan", "red3")) +
theme_bw()
funcion_dist<-function(x){dt(x, 398)}
ggplot()+
geom_function(fun=funcion_dist, xlim=c(+5,5))+
theme_bw()
library(ggplot2)
funcion_dist<-function(x){dt(x, 398)}
ggplot()+
geom_function(fun=funcion_dist, xlim=c(+5,5))+
theme_bw()
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(tidyverse)
library(pracma)
library(plotly)
library(polynom)
library(matlib)
library(RColorBrewer)
f<-function(x){(10*x^(3)-40*x-100)/(x^(2)-x-6)}
grafica<- ggplot()+
geom_function(fun=f, color="firebrick", linewith=1.2)+
stat_function(fun=f, geom="area", fill="green", alph=0.3)+
xlim(0,1)+
labs(x="x",y="y")+
theme_bw()
ggplotly(grafica)
pracma::integral(f,0,1)
f<-function(x){(x^(3)+4)/(x+9)(x+8)}
grafica<- ggplot()+
geom_function(fun=f, color="firebrick", linewith=1.2)+
stat_function(fun=f, geom="area", fill="green", alph=0.3)+
xlim(-3,1)+
labs(x="x",y="y")+
theme_bw()
ggplotly(grafica)
f<-function(x){(x^(3)+4)/(x+9)(x+8)}
grafica<- ggplot()+
geom_function(fun=f, color="firebrick", linewith=1.2)+
stat_function(fun=f, geom="area", fill="green", alph=0.3)+
xlim(-3,1)+
labs(x="x",y="y")+
theme_bw()
ggplotly(grafica)
f<-function(x){(x^(3)+4)/((x+9)*(x+8))}
grafica<- ggplot()+
geom_function(fun=f, color="firebrick", linewith=1.2)+
stat_function(fun=f, geom="area", fill="green", alph=0.3)+
xlim(-3,1)+
labs(x="x",y="y")+
theme_bw()
ggplotly(grafica)
pracma::integral(f,-3,1)
f<-function(x){8*x^(3)*((x^(2)+4)^(1/2))}
grafica<- ggplot()+
geom_function(fun=f, color="firebrick", linewith=1.2)+
stat_function(fun=f, geom="area", fill="green", alph=0.3)+
xlim(0,2)+
labs(x="x",y="y")+
theme_bw()
ggplotly(grafica)
f<-function(x){8*x^(3)*((x^(2)+4)^{1/2}}
f<-function(x){8*x^(3)*((x^(2)+4)^(0.5)}
f<-function(x){8*x^(3)*((x^(2)+4)^(0.5))}
grafica<- ggplot()+
geom_function(fun=f, color="firebrick", linewith=1.2)+
stat_function(fun=f, geom="area", fill="green", alph=0.3)+
xlim(0,2)+
labs(x="x",y="y")+
theme_bw()
ggplotly(grafica)
pracma::integral(f,0,2)
f<-function(x){-4*x^(3)*((x^(2)+4))^(0.5)}
grafica<- ggplot()+
geom_function(fun=f, color="firebrick", linewith=1.2)+
stat_function(fun=f, geom="area", fill="green", alph=0.3)+
xlim(0,2)+
labs(x="x",y="y")+
theme_bw()
ggplotly(grafica)
pracma::integral(f,0,2)
f<-function(x){x*((16*x-x^(2))^(0.5)}
f<-function(x){x*((16*x-x^(2))^(0.5)}
f<-function(x){x*((16*x-x^(2))^(0.5))}
grafica<- ggplot()+
geom_function(fun=f, color="firebrick", linewith=1.2)+
stat_function(fun=f, geom="area", fill="green", alph=0.3)+
xlim(8,16)+
labs(x="x",y="y")+
theme_bw()
ggplotly(grafica)
pracma::integral(f,8,16)
install.packages("remotes")
remotes::install_github("brunoruas2/gujarati")
library(gujarati)
Table_I.1 <- read.delim("http://www.econometrics.com/manuals/gujarati/data_3.1.shd", sep=" ", header=FALSE)[,2:4]
colnames(Table_I.1) <- c("Year", "PCE", "GDP")
plot(Table_I.1$GDP, Table_I.1$PCE,
bty = "l",
main = "Figure I.3:  Personal consumption expenditure (Y)
in relation to GDP (X), 1982-1996, in billions of 2000 dollars.",
font.main = 1,
xlab = "GDP (X)",
ylab = "PCE (Y)")
abline(lm(PCE~GDP, data=Table_I.1))
gujarati::Table1_3
library(gujarati)
data("Table1_3")
head(Table1_3)
library(gujarati)
data("Table1_3")
head(Table1_3)
# Calcula la tasa de inflación para cada país
inflacion <- Table1_3 %>%
mutate(across(everything(), ~ (.-lag(.)) / lag(.) * 100, .names = "inflacion_{col}"))
library(gujarati)
data("Table1_3")
head(Table1_3)
#Almacenamos la tabla en un Data.Frame
Tasa_inflación<-data.frame(YEAR=Table1_3$YEAR[-1])
for (county in colnames(Table1_3)[-1]{
library(gujarati)
data("Table1_3")
head(Table1_3)
#Almacenamos la tabla en un Data.Frame
Tasa_inflación<-data.frame(YEAR=Table1_3$YEAR[-1])
for (county in colnames(Table1_3)[-1]{
library(gujarati)
data("Table1_3")
head(Table1_3)
#Almacenamos la tabla en un Data.Frame
Tasa_inflación<-data.frame(YEAR=Table1_3$YEAR[-1])
for (county in colnames(Table1_3)[-1]{
library(gujarati)
data("Table1_3")
head(Table1_3)
#Almacenamos la tabla en un Data.Frame
Tasa_inflación<-data.frame(YEAR=Table1_3$YEAR[-1])
for (county in colnames(Table1_3)[-1]{
library(gujarati)
data("Table1_3")
head(Table1_3)
#Almacenamos la tabla en un Data.Frame
Tasa_inflación<-data.frame(YEAR=Table1_3$YEAR[-1])
for (country in colnames(Table1_3)[-1]{
library(gujarati)
data("Table1_3")
head(Table1_3)
#Almacenamos la tabla en un Data.Frame
Tasa_inflación<-data.frame(YEAR=Table1_3$YEAR[-1])
for (country in colnames(Table1_3)[-1]{
library(gujarati)
data("Table1_3")
head(Table1_3)
#Almacenamos la tabla en un Data.Frame
for (country in colnames(Table1_3)[-1]) {  # Excluir la columna "Year"
inflation_rates[[country]] <- (Table1_3[[country]][-1] - Table1_3[[country]][-nrow(Table1_3)]) / Table1_3[[country]][-nrow(Table1_3)] * 100
}
library(gujarati)
data("Table1_3")
head(Table1_3)
# Crear un data frame para almacenar las tasas de inflación
inflation_rates <- data.frame(Year = Table1_3$Year[-1])  # Excluir el primer año ya que no hay año anterior
# Calcular la tasa de inflación para cada país
for (country in colnames(Table1_3)[-1]) {  # Excluir la columna "Year"
inflation_rates[[country]] <- (Table1_3[[country]][-1] - Table1_3[[country]][-nrow(Table1_3)]) / Table1_3[[country]][-nrow(Table1_3)] * 100
}
str(Table1_3)
install.packages("openxlsx")  # Instalar el paquete si no está instalado
library(openxlsx)             # Cargar el paquete
# Especifica el nombre del archivo de salida
output_file <- "Table1_3.xlsx"
# Escribir los datos en un archivo Excel
write.xlsx(Table1_3, file = output_file)
# Confirmación de exportación
cat("La tabla 'Table1_3' ha sido exportada a", output_file)
getwd()  # Mostrar el directorio de trabajo actual
setwd("ruta/deseada")  # Cambiar el directorio de trabajo a la ruta deseada
setwd("C:/Users/ivanj/OneDrive/Documentos/Github/R-studio/Gujarati_Econometrics")
# Cambiar el directorio de trabajo
setwd("C:/Users/ivanj/OneDrive/Documentos/Github/R-studio/Gujarati_Econometrics")
# Especifica el nombre del archivo de salida
output_file <- "Table1_3.xlsx"
# Escribir los datos en un archivo Excel
write.xlsx(Table1_3, file = output_file)
# Confirmación de exportación
cat("La tabla 'Table1_3' ha sido exportada a", output_file)
install.packages("readxl")
library(readxl)
library(readxl)
file.choose()
