knitr::opts_chunk$set(echo = FALSE)
suppressPackageStartupMessages({
library(tseries)
library(dplyr)
library(lmtest)
library(forecast)
library(ggfortify)
})
# Generamos Tabla con los datos a evaluar
tabla<-read.csv('energia.csv')
tabla2<-select(tabla,Periodo=y,IE=x)
head(tabla2)
# Grafico de los datos
plot(tabla2$IE, type = 'l',
main = "Índice de Generación, Transmisión y Distribución de Energía Eléctrica",
col = "#3585A6",
xlab = "Periodo mensual desde 2010",
ylab = "Porcentaje de incremento")
library(zoo)
# Supongamos que tu Periodo viene como "YYYY-MM"
tabla2$PeriodoDate <- as.yearmon(tabla2$Periodo, "%Y-%m")
plot(
x   = tabla2$PeriodoDate,
y   = tabla2$IE,
type = "l",
main = "Índice de Generación, Transmisión y Distribución de Energía Eléctrica",
col  = "#3585A6",
xlab = "Periodo",
ylab = "Porcentaje de incremento"
)
plot(
x   = tabla2$Periodo,
y   = tabla2$IE,
type = "l",
main = "Índice de Generación, Transmisión y Distribución de Energía Eléctrica",
col  = "#3585A6",
xlab = "Periodo",
ylab = "Porcentaje de incremento"
)
# Generamos Tabla con los datos a evaluar
tabla <- read.csv('energia.csv')
tabla2 <- select(tabla, Periodo=y, IE=x)
# Grafico de los datos con etiquetas de periodos reales
plot(tabla2$IE, type = 'l',
main = "Índice de Generación, Transmisión y Distribución de Energía Eléctrica",
col = "#3585A6",
xlab = "Periodo mensual desde 2010",
ylab = "Porcentaje de incremento",
xaxt = 'n')  # Suprimimos el eje x predeterminado
# Definimos las posiciones para las etiquetas (puedes ajustar esto)
posiciones_etiquetas <- seq(1, length(tabla2$Periodo), by = 12)  # Por ejemplo, cada 12 meses
# Agregamos el eje x con los valores de periodo reales
axis(1, at = posiciones_etiquetas, labels = tabla2$Periodo[posiciones_etiquetas])
# Opcional: Agregar una cuadrícula para facilitar la lectura
grid()
# Generamos Tabla con los datos a evaluar
tabla <- read.csv('energia.csv')
tabla2 <- select(tabla, Periodo=y, IE=x)
head(tabla2)
# Grafico de los datos con etiquetas de periodos reales
plot(tabla2$IE, type = 'l',
main = "Índice de Generación, Transmisión y Distribución de Energía Eléctrica",
col = "#3585A6",
xlab = "Periodo mensual desde 2010",
ylab = "Porcentaje de incremento",
xaxt = 'n')  # Suprimimos el eje x predeterminado
# Definimos las posiciones para las etiquetas (puedes ajustar esto)
posiciones_etiquetas <- seq(1, length(tabla2$Periodo), by = 12)  # Por ejemplo, cada 12 meses
# Agregamos el eje x con los valores de periodo reales
axis(1, at = posiciones_etiquetas, labels = tabla2$Periodo[posiciones_etiquetas])
# Opcional: Agregar una cuadrícula para facilitar la lectura
grid()
# Generamos Tabla con los datos a evaluar
tabla <- read.csv('energia.csv')
tabla2 <- select(tabla, Periodo=y, IE=x)
head(tabla2)
# Grafico de los datos con etiquetas de periodos reales
plot(tabla2$IE, type = 'l',
main = "Índice de Generación, Transmisión y Distribución de Energía Eléctrica",
col = "#3585A6",
xlab = "Periodo mensual desde 2010",
ylab = "Porcentaje de incremento",
xaxt = 'n')  # Suprimimos el eje x predeterminado
# Definimos las posiciones para las etiquetas (puedes ajustar esto)
posiciones_etiquetas <- seq(1, length(tabla2$Periodo), by = 12)  # Por ejemplo, cada 12 meses
# Agregamos el eje x con los valores de periodo reales
axis(1, at = posiciones_etiquetas, labels = tabla2$Periodo[posiciones_etiquetas])
# Opcional: Agregar una cuadrícula para facilitar la lectura
grid()
# Prueba de Dickey Fuller Aumentada
x<-tabla2$IE
adf.test(x)
# Obtener los resultados de la ACF sin graficar
acf_result <- acf(d1x, plot = FALSE)
# Funcion de autocorrelacion (MA)
acf(d1x)
# Prueba de Dickey Fuller Aumentada
x<-tabla2$IE
adf.test(x)
# 1era Diferencia
d1x <- diff(x)
adf.test(d1x)
plot(d1x, type = 'l',
main = "Primera Diferencia de la Serie de Energía Eléctrica",
col = "#2E628C",
xlab = "Periodo",
ylab = "Cambio mensual en el índice")
# Funcion de autocorrelacion (MA)
acf(d1x)
# Obtener los resultados de la ACF sin graficar
acf_result <- acf(d1x, plot = FALSE)
# Crear un dataframe para presentar los resultados
lag_max <- length(acf_result$acf) - 1
resultados_acf <- data.frame(
Lag = 0:lag_max,
Autocorrelacion = acf_result$acf,
Error_Standard = rep(1/sqrt(length(d1x)), lag_max + 1),
Limite_Inferior = qnorm(0.025) * 1/sqrt(length(d1x)),
Limite_Superior = qnorm(0.975) * 1/sqrt(length(d1x))
)
# Imprimir la tabla de resultados
print(resultados_acf)
# O para más elegancia, usar kable si tienes knitr cargado
# library(knitr)
# kable(resultados_acf, digits = 4, caption = "Estimadores de la función de autocorrelación")
a <- acf(d1x)
a
# Funcion de autocorrelacion (MA)
a <- acf(d1x)
a
# Funcion de autocorrelacion parcial (AR)
pacf(d1x)
p<- pacf(x)
p
# Funcion de autocorrelacion parcial (AR)
p<-pacf(d1x)
p
knitr::opts_chunk$set(echo = FALSE)
library(tseries)
library(dplyr)
library(lmtest)
library(forecast)
knitr::opts_chunk$set(echo = FALSE)
# Generamos Tabla con los datos a evaluar
tabla<-read.csv('energia.csv')
# Generamos Tabla con los datos a evaluar
tabla <- read.csv('energia.csv')
tabla2 <- select(tabla, Periodo=y, IE=x)
head(tabla2)
# Grafico de los datos con etiquetas de periodos reales
plot(tabla2$IE, type = 'l',
main = "Índice de Generación, Transmisión y Distribución de Energía Eléctrica",
col = "#3585A6",
xlab = "Periodo mensual desde 2010",
ylab = "Porcentaje de incremento",
xaxt = 'n')  # Suprimimos el eje x predeterminado
# Definimos las posiciones para las etiquetas (puedes ajustar esto)
posiciones_etiquetas <- seq(1, length(tabla2$Periodo), by = 12)  # Por ejemplo, cada 12 meses
# Agregamos el eje x con los valores de periodo reales
axis(1, at = posiciones_etiquetas, labels = tabla2$Periodo[posiciones_etiquetas])
# Opcional: Agregar una cuadrícula para facilitar la lectura
grid()
# Prueba de Dickey Fuller Aumentada
x<-tabla2$IE
adf.test(x)
# 1era Diferencia
d1x <- diff(x)
adf.test(d1x)
plot(d1x, type = 'l',
main = "Primera Diferencia de la Serie de Energía Eléctrica",
col = "#2E628C",
xlab = "Periodo",
ylab = "Cambio mensual en el índice")
# Funcion de autocorrelacion (MA)
a <- acf(d1x)
a
# Funcion de autocorrelacion parcial (AR)
p<-pacf(d1x)
p
# Ajustar un modelo Arima con AIC
p <- 4
q <- 4
d <- 0:1
tabla0 <- data.frame()
for (d in d) {
for (p in 0:p) {
for (q in 0:q) {
modelo <- tryCatch(
arima(x, order = c(p, d, q)),
error = function(e) NULL
)
if (!is.null(modelo)) {
A <- AIC(modelo)
tabla0 <- rbind(tabla0, c(p, d, q, A))
}
}
}
}
colnames(tabla0) <- c("p", "d", "q", "AIC")
tabla0 <- arrange(tabla0, AIC) %>% head(5)
tabla0
# Coeficientes significativos? Los 5 mejores
# Calcular estadísticos t manualmente
modelo1 <- arima(x, order = c(4,1,4))
resumen <-summary(modelo1)
coeficientes <- coef(modelo1)
errores <- sqrt(diag(modelo1$var.coef))  # Errores estándar
t_calculado <- coeficientes / errores
significativos <- abs(t_calculado) >= 1.98
significativos
resumen
modelo2 <- arima(x, order = c(4,1,2))
resumen2<-summary(modelo2)
coeficientes <- coef(modelo2)
errores <- sqrt(diag(modelo2$var.coef))  # Errores estándar
t_calculado2 <- coeficientes / errores
significativos2 <- abs(t_calculado2) >= 1.98
significativos2
resumen2
modelo3 <- arima(x, order = c(3,1,3))
resumen3<-summary(modelo3)
coeficientes <- coef(modelo3)
errores <- sqrt(diag(modelo3$var.coef))  # Errores estándar
t_calculado3 <- coeficientes / errores
significativos3 <- abs(t_calculado3) >= 1.98
significativos3
resumen3
modelo4 <- arima(x, order = c(3,1,2))
resumen4<-summary(modelo4)
coeficientes <- coef(modelo4)
errores <- sqrt(diag(modelo4$var.coef))  # Errores estándar
t_calculado4 <- coeficientes / errores
significativos4 <- abs(t_calculado4) >= 1.98
significativos4
resumen4
modelo5 <- arima(x, order = c(4,1,3))
resumen5<-summary(modelo5)
coeficientes <- coef(modelo5)
errores <- sqrt(diag(modelo5$var.coef))  # Errores estándar
t_calculado5 <- coeficientes / errores
significativos5 <- abs(t_calculado5) >= 1.98
significativos5
resumen5
# Intervalos de confianza del mejor modelo
confint(modelo4, level = 0.95)
# Intervalos de confianza
coeficientes <- coef(modelo4)
errores <- sqrt(diag(modelo4$var.coef))
tabla_intervalos <- data.frame(
Parametro = names(coeficientes),
Estimacion = coeficientes,
Std_Error = errores,
LI = coeficientes - 1.98 * errores,  # Límite inferior
LS = coeficientes + 1.98 * errores   # Límite superior
)
tabla_intervalos
# Auto Arima
AA<-auto.arima(x)
AA
# Intervalos de confianza
coeficientes <- coef(AA)
errores <- sqrt(diag(AA$var.coef))  # Errores estándar
t_calculado <- coeficientes / errores
significativos <- abs(t_calculado) >= 1.98
significativos
# Intervalos de confianza
coeficientesA <- coef(AA)
erroresA <- sqrt(diag(AA$var.coef))
tabla_intervalosA <- data.frame(
ParametroA = names(coeficientesA),
EstimacionA = coeficientesA,
Std_ErrorA = errores,
LI = coeficientesA - 1.98 * erroresA,  # Límite inferior
LS = coeficientesA + 1.98 * erroresA   # Límite superior
)
tabla_intervalosA
residuos <- residuals(modelo4)
plot(residuos, main = "Gráfica de los Residuos", ylab = "Residuos", xlab = "Periodo")
acf(residuos)
Box.test(resid(modelo4), lag = 20, type = "Ljung-Box")
hist(resid(modelo4), freq = FALSE)
autoplot(AA, circle = TRUE)
autoplot(modelo4, circle = TRUE)
# Solución 1: Asegúrate de tener los paquetes necesarios
library(forecast)
library(ggplot2)
# Solución 2: Especifica explícitamente todos los parámetros
autoplot(AA, circle = TRUE, circle.col = "red", circle.lty = 1)
autoplot(modelo4, circle = TRUE, circle.col = "red", circle.lty = 1)
# Solución 3: Si los anteriores no funcionan, crea manualmente el gráfico
# Para un modelo AR
plot(AA)
symbols(0, 0, circles = 1, inches = FALSE, add = TRUE, fg = "blue")
# Para un modelo ARIMA (raíces invertidas)
plot(modelo4)
symbols(0, 0, circles = 1, inches = FALSE, add = TRUE, fg = "blue")
autoplot(modelo4)
# La forma más simple y que debería funcionar
library(forecast)
autoplot(modelo4) +
ggplot2::geom_path(data = data.frame(x = cos(seq(0, 2*pi, length.out = 100)),
y = sin(seq(0, 2*pi, length.out = 100))),
aes(x = x, y = y), color = "red")
roots <- polyroot(c(1, -coef(modelo4)[grepl("ar", names(coef(modelo4)))]))
plot(Re(roots), Im(roots), xlim = c(-1.5, 1.5), ylim = c(-1.5, 1.5),
xlab = "Real", ylab = "Imaginaria", main = "Raíces del polinomio AR")
symbols(0, 0, circles = 1, inches = FALSE, add = TRUE, fg = "blue")
abline(h = 0, v = 0, lty = 2, col = "gray")
library(ggplot2)
# Solución 2: Especifica explícitamente todos los parámetros
autoplot(AA, circle = TRUE, circle.col = "red", circle.lty = 1)
autoplot(modelo4, circle = TRUE, circle.col = "red", circle.lty = 1)
# Solución 3: Si los anteriores no funcionan, crea manualmente el gráfico
# Para un modelo AR
plot(AA)
symbols(0, 0, circles = 1, inches = FALSE, add = TRUE, fg = "blue")
# Para un modelo ARIMA (raíces invertidas)
plot(modelo4)
symbols(0, 0, circles = 1, inches = FALSE, add = TRUE, fg = "blue")
library(ggplot2)
# Solución 2: Especifica explícitamente todos los parámetros
#autoplot(AA, circle = TRUE, circle.col = "red", circle.lty = 1)
#autoplot(modelo4, circle = TRUE, circle.col = "red", circle.lty = 1)
# Solución 3: Si los anteriores no funcionan, crea manualmente el gráfico
# Para un modelo AR
plot(AA)
symbols(0, 0, circles = 1, inches = FALSE, add = TRUE, fg = "blue")
# Para un modelo ARIMA (raíces invertidas)
plot(modelo4)
symbols(0, 0, circles = 1, inches = FALSE, add = TRUE, fg = "blue")
library(ggplot2)
# Solución 2: Especifica explícitamente todos los parámetros
#autoplot(AA, circle = TRUE, circle.col = "red", circle.lty = 1)
#autoplot(modelo4, circle = TRUE, circle.col = "red", circle.lty = 1)
# Solución 3: Si los anteriores no funcionan, crea manualmente el gráfico
# Para un modelo AR
#plot(AA)
symbols(0, 0, circles = 1, inches = FALSE, add = TRUE, fg = "blue")
library(ggplot2)
# Solución 2: Especifica explícitamente todos los parámetros
#autoplot(AA, circle = TRUE, circle.col = "red", circle.lty = 1)
#autoplot(modelo4, circle = TRUE, circle.col = "red", circle.lty = 1)
# Solución 3: Si los anteriores no funcionan, crea manualmente el gráfico
# Para un modelo AR
plot(AA)
#symbols(0, 0, circles = 1, inches = FALSE, add = TRUE, fg = "blue")
# Para un modelo ARIMA (raíces invertidas)
plot(modelo4)
symbols(0, 0, circles = 1, inches = FALSE, add = TRUE, fg = "blue")
library(ggplot2)
# Solución 2: Especifica explícitamente todos los parámetros
#autoplot(AA, circle = TRUE, circle.col = "red", circle.lty = 1)
#autoplot(modelo4, circle = TRUE, circle.col = "red", circle.lty = 1)
# Solución 3: Si los anteriores no funcionan, crea manualmente el gráfico
# Para un modelo AR
plot(AA)
#symbols(0, 0, circles = 1, inches = FALSE, add = TRUE, fg = "blue")
# Para un modelo ARIMA (raíces invertidas)
plot(modelo4)
#symbols(0, 0, circles = 1, inches = FALSE, add = TRUE, fg = "blue")
# Solución 2: Especifica explícitamente todos los parámetros
#autoplot(AA, circle = TRUE, circle.col = "red", circle.lty = 1)
#autoplot(modelo4, circle = TRUE, circle.col = "red", circle.lty = 1)
# Solución 3: Si los anteriores no funcionan, crea manualmente el gráfico
# Para un modelo AR
plot(AA)
#symbols(0, 0, circles = 1, inches = FALSE, add = TRUE, fg = "blue")
# Para un modelo ARIMA (raíces invertidas)
plot(modelo4)
#symbols(0, 0, circles = 1, inches = FALSE, add = TRUE, fg = "blue")
