#plot(d2x, type = 'l')
#acf(d2x)
# Generamos Tabla con los datos a evaluar
tabla<-read.csv('energia.csv')
tabla2<-select(tabla,Periodo=y,IE=x)
head(tabla2)
# Grafico de los datos
plot(tabla2$IE, type = 'l',
main = "Índice de Generación, Transmisión y Distribución de Energía Eléctrica",
col = "#3585A6",
xlab = "Periodo mensual desde 2010",
ylab = "Índice (base 2013 = 100)")
# Diferenciar
d1x <- diff(x)
adf.test(d1x)
plot(d1x, type = 'l',
main = "Primera Diferencia de la Serie de Energía Eléctrica",
col = "#2E628C",
xlab = "Periodo",
ylab = "Cambio mensual en el índice")
acf(d1x)
# Diferencia 2
#d2x <- diff(d1x)
#adf.test(d2x)
#plot(d2x, type = 'l')
#acf(d2x)
# 1era Diferencia
d1x <- diff(x)
adf.test(d1x)
plot(d1x, type = 'l',
main = "Primera Diferencia de la Serie de Energía Eléctrica",
col = "#2E628C",
xlab = "Periodo",
ylab = "Cambio mensual en el índice")
# Funcion de autocorrelacion (MA)
acf(d1x)
# Funcion de autocorrelacion parcial (AR)
pacf(d1x)
# Diferencia 2
#d2x <- diff(d1x)
#adf.test(d2x)
#plot(d2x, type = 'l')
#acf(d2x)
# Propuesta de un modelo puntual
modelo1 <- arima(x, order = c(1,1,2))
modelo2 <- arima(x, order = c(2,1,1))
p<-2
q<-1
tabla0 <-data.frame()
for(p in 0:p) for(q in 0:q)
{
modelo <- arima(x,order = c(p,1,q))
A<-AIC(modelo)
tabla0<-rbind(tabla0, c(p,1,q,A))
}
tabla0<-rename(tabla0,'p'=1, 'd'=2, 'q'=3, 'AIC'=4)
tabla0<-arrange(tabla,AIC)
# Propuesta de un modelo puntual
modelo1 <- arima(x, order = c(1,1,2))
modelo2 <- arima(x, order = c(2,1,1))
p<-2
q<-1
tabla0 <-data.frame()
for(p in 0:p) for(q in 0:q)
{
modelo <- arima(x,order = c(p,1,q))
A<-AIC(modelo)
tabla0<-rbind(tabla0, c(p,1,q,A))
}
tabla0<-rename(tabla0,'p'=1, 'd'=2, 'q'=3, 'AIC'=4)
tabla0<-arrange(tabla0,AIC)
tabla
#arima(x, order = c(2,0,0))#el mejor
#auto.arima(Y)
#plot(forecast(modelo,20x),xlim=c(1990,2020))
# Propuesta de un modelo puntual
modelo1 <- arima(x, order = c(1,1,2))
modelo2 <- arima(x, order = c(2,1,1))
p<-2
q<-1
tabla0 <-data.frame()
for(p in 0:p) for(q in 0:q)
{
modelo <- arima(x,order = c(p,1,q))
A<-AIC(modelo)
tabla0<-rbind(tabla0, c(p,1,q,A))
}
tabla0<-rename(tabla0,'p'=1, 'd'=2, 'q'=3, 'AIC'=4)
tabla0<-arrange(tabla0,AIC)
tabla0
#arima(x, order = c(2,0,0))#el mejor
#auto.arima(Y)
#plot(forecast(modelo,20x),xlim=c(1990,2020))
p <- 3
q <- 3
d <- 0:2
tabla0 <- data.frame()
for (d in d) {
for (p in 0:p) {
for (q in 0:q) {
modelo <- tryCatch(
arima(x, order = c(p, d, q)),
error = function(e) NULL
)
if (!is.null(modelo)) {
A <- AIC(modelo)
tabla0 <- rbind(tabla0, c(p, d, q, A))
}
}
}
}
colnames(tabla0) <- c("p", "d", "q", "AIC")
tabla0 <- arrange(tabla0, AIC) %>% head(5)
print(tabla0)
p <- 3
q <- 3
d <- 0:2
tabla0 <- data.frame()
for (d in d) {
for (p in 0:p) {
for (q in 0:q) {
modelo <- tryCatch(
arima(x, order = c(p, d, q)),
error = function(e) NULL
)
if (!is.null(modelo)) {
A <- AIC(modelo)
tabla0 <- rbind(tabla0, c(p, d, q, A))
}
}
}
}
colnames(tabla0) <- c("p", "d", "q", "AIC")
tabla0 <- arrange(tabla0, AIC) %>% head(10)
print(tabla0)
p <- 3
q <- 3
d <- 0:2
tabla0 <- data.frame()
for (d in d) {
for (p in 0:p) {
for (q in 0:q) {
modelo <- tryCatch(
arima(x, order = c(p, d, q)),
error = function(e) NULL
)
if (!is.null(modelo)) {
A <- AIC(modelo)
tabla0 <- rbind(tabla0, c(p, d, q, A))
}
}
}
}
colnames(tabla0) <- c("p", "d", "q", "AIC")
tabla0 <- arrange(tabla0, AIC) %>% head(50)
print(tabla0)
# Coeficientes significativos? Los 5 mejores
modelo1 <- arima(x, order = c(3,1,3))
co1 <- coeftest(modelo1)
# Coeficientes significativos? Los 5 mejores
modelo1 <- arima(x, order = c(3,1,3))
summary(modelo1)
modelo2 <- arima(x, order = c(3,1,2))
coeficientes <- coeftest(modelo2)
# Coeficientes significativos? Los 5 mejores
modelo1 <- arima(x, order = c(3,1,3))
summary(modelo1)
modelo2 <- arima(x, order = c(3,1,2))
summary(modelo1)
modelo3 <- arima(x, order = c(3,1,1))
summary(modelo1)
#modelo4 <- arima(x, order = c(2,0,2))
#summary(modelo1)
#modelo5 <- arima(x, order = c(3,0,3))
#summary(modelo1)
#coeficientes <- coeftest(modelo5)
# Coeficientes significativos? Los 5 mejores
modelo1 <- arima(x, order = c(3,1,3))
summary(modelo1)
#modelo2 <- arima(x, order = c(3,1,2))
#summary(modelo1)
#modelo3 <- arima(x, order = c(3,1,1))
#summary(modelo1)
#modelo4 <- arima(x, order = c(2,0,2))
#summary(modelo1)
#modelo5 <- arima(x, order = c(3,0,3))
#summary(modelo1)
#coeficientes <- coeftest(modelo5)
# Coeficientes significativos? Los 5 mejores
modelo1 <- arima(x, order = c(3,1,3))
summary(modelo1)
lm(modelo1)
# Coeficientes significativos? Los 5 mejores
modelo1 <- arima(x, order = c(3,1,3))
summary(modelo1)
coefs <- coef(modelo1)
#modelo2 <- arima(x, order = c(3,1,2))
#summary(modelo1)
#modelo3 <- arima(x, order = c(3,1,1))
#summary(modelo1)
#modelo4 <- arima(x, order = c(2,0,2))
#summary(modelo1)
#modelo5 <- arima(x, order = c(3,0,3))
#summary(modelo1)
#coeficientes <- coeftest(modelo5)
# Coeficientes significativos? Los 5 mejores
modelo1 <- arima(x, order = c(3,1,3))
summary(modelo1)
coefs <- coef(modelo1)
coefs
#modelo2 <- arima(x, order = c(3,1,2))
#summary(modelo1)
#modelo3 <- arima(x, order = c(3,1,1))
#summary(modelo1)
#modelo4 <- arima(x, order = c(2,0,2))
#summary(modelo1)
#modelo5 <- arima(x, order = c(3,0,3))
#summary(modelo1)
#coeficientes <- coeftest(modelo5)
# Coeficientes significativos? Los 5 mejores
modelo1 <- arima(x, order = c(3,1,3))
#summary(modelo1)
coefs <- coef(modelo1)
coefs
#modelo2 <- arima(x, order = c(3,1,2))
#summary(modelo1)
#modelo3 <- arima(x, order = c(3,1,1))
#summary(modelo1)
#modelo4 <- arima(x, order = c(2,0,2))
#summary(modelo1)
#modelo5 <- arima(x, order = c(3,0,3))
#summary(modelo1)
#coeficientes <- coeftest(modelo5)
# Coeficientes significativos? Los 5 mejores
modelo1 <- Arima(x, order = c(3,1,3))
# Coeficientes significativos? Los 5 mejores
modelo1 <- arima(x, order = c(3,1,3))
summary(modelo1)
#modelo2 <- arima(x, order = c(3,1,2))
#summary(modelo1)
#modelo3 <- arima(x, order = c(3,1,1))
#summary(modelo1)
#modelo4 <- arima(x, order = c(2,0,2))
#summary(modelo1)
#modelo5 <- arima(x, order = c(3,0,3))
#summary(modelo1)
#coeficientes <- coeftest(modelo5)
# Coeficientes significativos? Los 5 mejores
modelo1 <- arima(x, order = c(3,1,3))
summary(modelo1)
coeficientes <- resumen$coef
# Coeficientes significativos? Los 5 mejores
modelo1 <- arima(x, order = c(3,1,3))
resumen <-summary(modelo1)
coeficientes <- resumen$coef
t_calculado <- coeficientes[, "Estimate"] / coeficientes[, "Std. Error"]
# Coeficientes significativos? Los 5 mejores
# Calcular estadísticos t manualmente
modelo1 <- arima(x, order = c(3,1,3))
resumen <-summary(modelo1)
coeficientes <- coef(modelo1)
errores <- sqrt(diag(modelo1$var.coef))  # Errores estándar
t_calculado <- coeficientes / errores
significativos <- abs(t_calculado) >= 1.98
#modelo2 <- arima(x, order = c(3,1,2))
#summary(modelo1)
#modelo3 <- arima(x, order = c(3,1,1))
#summary(modelo1)
#modelo4 <- arima(x, order = c(2,0,2))
#summary(modelo1)
#modelo5 <- arima(x, order = c(3,0,3))
#summary(modelo1)
#coeficientes <- coeftest(modelo5)
# Coeficientes significativos? Los 5 mejores
# Calcular estadísticos t manualmente
modelo1 <- arima(x, order = c(3,1,3))
resumen <-summary(modelo1)
coeficientes <- coef(modelo1)
errores <- sqrt(diag(modelo1$var.coef))  # Errores estándar
t_calculado <- coeficientes / errores
significativos <- abs(t_calculado) >= 1.98
significativos
#modelo2 <- arima(x, order = c(3,1,2))
#summary(modelo1)
#modelo3 <- arima(x, order = c(3,1,1))
#summary(modelo1)
#modelo4 <- arima(x, order = c(2,0,2))
#summary(modelo1)
#modelo5 <- arima(x, order = c(3,0,3))
#summary(modelo1)
#coeficientes <- coeftest(modelo5)
# Coeficientes significativos? Los 5 mejores
# Calcular estadísticos t manualmente
modelo1 <- arima(x, order = c(3,1,3))
resumen <-summary(modelo1)
coeficientes <- coef(modelo1)
errores <- sqrt(diag(modelo1$var.coef))  # Errores estándar
t_calculado <- coeficientes / errores
significativos <- abs(t_calculado) >= 1.98
significativos
modelo2 <- arima(x, order = c(3,1,2))
summary(modelo1)
coeficientes <- coef(modelo2)
errores <- sqrt(diag(modelo2$var.coef))  # Errores estándar
t_calculado2 <- coeficientes / errores
significativos2 <- abs(t_calculado2) >= 1.98
significativos2
#modelo3 <- arima(x, order = c(3,1,1))
#summary(modelo1)
#modelo4 <- arima(x, order = c(2,0,2))
#summary(modelo1)
#modelo5 <- arima(x, order = c(3,0,3))
#summary(modelo1)
#coeficientes <- coeftest(modelo5)
# Coeficientes significativos? Los 5 mejores
# Calcular estadísticos t manualmente
modelo1 <- arima(x, order = c(3,1,3))
resumen <-summary(modelo1)
coeficientes <- coef(modelo1)
errores <- sqrt(diag(modelo1$var.coef))  # Errores estándar
t_calculado <- coeficientes / errores
significativos <- abs(t_calculado) >= 1.98
significativos
modelo2 <- arima(x, order = c(3,1,2))
resumen2<-summary(modelo1)
coeficientes <- coef(modelo2)
errores <- sqrt(diag(modelo2$var.coef))  # Errores estándar
t_calculado2 <- coeficientes / errores
significativos2 <- abs(t_calculado2) >= 1.98
significativos2
#modelo3 <- arima(x, order = c(3,1,1))
#summary(modelo1)
#modelo4 <- arima(x, order = c(2,0,2))
#summary(modelo1)
#modelo5 <- arima(x, order = c(3,0,3))
#summary(modelo1)
#coeficientes <- coeftest(modelo5)
# Intervalos de confianza
confint(modelo1, level = 0.95)
# Intervalos de confianza
confint(modelo2, level = 0.95)
modelo2 <- arima(x, order = c(3,1,2))
resumen2<-summary(modelo1)
resumen2
coeficientes <- coef(modelo2)
errores <- sqrt(diag(modelo2$var.coef))
# Crear tabla con resultados
tabla_intervalos <- data.frame(
Parametro = names(coeficientes),
Estimacion = coeficientes,
Std_Error = errores,
LI = coeficientes - 1.98 * errores,  # Límite inferior
LS = coeficientes + 1.98 * errores   # Límite superior
)
# Mostrar resultados
print(tabla_intervalos)
# Auto Arima
auto.arima(x)
# Auto Arima
auto.arima(x)
library(tseries)
library(dplyr)
library(lmtest)
library(forecast)
# Auto Arima
auto.arima(x)
coeficientes <- coef(AA)
# Auto Arima
AA<-auto.arima(x)
AA
# Intervalos de confianza
coeficientes <- coef(AA)
errores <- sqrt(diag(AA$var.coef))  # Errores estándar
t_calculado <- coeficientes / errores
significativos <- abs(t_calculado) >= 1.98
significativos
# Intervalos de confianza
coeficientesA <- coef(AA)
erroresA <- sqrt(diag(AA$var.coef))
tabla_intervalosA <- data.frame(
ParametroA = names(coeficientesA),
EstimacionA = coeficientesA,
Std_ErrorA = errores,
LI = coeficientesA - 1.98 * errores,  # Límite inferior
LS = coeficientesA + 1.98 * errores   # Límite superior
)
tabla_intervalosA
# Intervalos de confianza
coeficientesA <- coef(AA)
erroresA <- sqrt(diag(AA$var.coef))
tabla_intervalosA <- data.frame(
ParametroA = names(coeficientesA),
EstimacionA = coeficientesA,
Std_ErrorA = errores,
LI = coeficientesA - 1.98 * Std_ErrorA,  # Límite inferior
LS = coeficientesA + 1.98 * Std_ErrorA   # Límite superior
)
# Intervalos de confianza
coeficientesA <- coef(AA)
erroresA <- sqrt(diag(AA$var.coef))
tabla_intervalosA <- data.frame(
ParametroA = names(coeficientesA),
EstimacionA = coeficientesA,
Std_ErrorA = errores,
LI = coeficientesA - 1.98 * erroresA,  # Límite inferior
LS = coeficientesA + 1.98 * erroresA   # Límite superior
)
tabla_intervalosA
length(x)
n<-length(x)
plot(forecast(AA,20),xlim=c(161,180))
# Asignar fechas a la serie (ejemplo: serie mensual desde enero 2010)
fechas <- seq.Date(from = as.Date("2010-01-01"), by = "month", length.out = n)
x_ts <- ts(x, start = c(2010, 1), frequency = 12)
# Pronóstico y gráfico con fechas
pronostico <- forecast(AA, h = 20)
autoplot(pronostico) +
xlab("Fecha") +
ylab("Valor") +
ggtitle("Pronóstico de 20 meses desde junio 2023")
library(forecast)
library(ggplot2)
library(lubridate)
library(dplyr)
# Definir parámetros más claros y flexibles
start_date <- as.Date("2010-01-01")
end_date <- as.Date("2023-06-30")  # Asumiendo que tus datos terminan en junio 2023
forecast_horizon <- 20             # Número de períodos a pronosticar
freq <- 12                         # Frecuencia (12 = mensual)
# Generar fechas de manera más robusta
fechas <- seq.Date(from = start_date, to = end_date, by = "month")
n <- length(fechas)
# Asumiendo que 'x' son tus datos
# Si no tienes 'x' definido, puedes generar datos sintéticos:
# x <- rnorm(n, mean = 100, sd = 10) + seq(1:n)/10 + sin(seq(1:n)/6)*15  # Datos de ejemplo con tendencia y estacionalidad
# Crear serie temporal con formato adecuado
x_ts <- ts(x, start = c(year(start_date), month(start_date)), frequency = freq)
# Usar el modelo AA que ya contiene un auto.arima
# Si necesitas ver el resumen del modelo:
summary(AA)  # Mostrar información del modelo
# Realizar pronóstico
pronostico <- forecast(AA, h = forecast_horizon)
# Crear dataframe para gráfico más personalizado
forecast_df <- fortify(pronostico)
library(forecast)
library(ggplot2)
library(lubridate)
library(dplyr)
# Definir parámetros más claros y flexibles
start_date <- as.Date("2010-01-01")
end_date <- as.Date("2023-06-30")  # Asumiendo que tus datos terminan en junio 2023
forecast_horizon <- 20             # Número de períodos a pronosticar
freq <- 12                         # Frecuencia (12 = mensual)
# Generar fechas de manera más robusta
fechas <- seq.Date(from = start_date, to = end_date, by = "month")
n <- length(fechas)
# Crear serie temporal con formato adecuado
x_ts <- ts(x, start = c(year(start_date), month(start_date)), frequency = freq)
# Usar el modelo AA existente
# Realizar pronóstico
pronostico <- forecast(AA, h = forecast_horizon)
# Uso de autoplot en lugar de fortify + ggplot
ultimo_mes <- format(end_date, "%B %Y")
# Gráfico mejorado usando autoplot (que ya viene con el paquete forecast)
autoplot(pronostico) +
theme_minimal() +
labs(
title = paste("Pronóstico de", forecast_horizon, "meses desde", ultimo_mes),
x = "Tiempo",
y = "Valor",
caption = "Intervalos de confianza: 80% (oscuro) y 95% (claro)"
) +
theme(
plot.title = element_text(face = "bold", size = 14),
axis.title = element_text(face = "bold")
)
# Extraer valores del pronóstico en un formato fácil de usar
resultados <- data.frame(
Fecha = seq.Date(from = end_date + months(1), by = "month", length.out = forecast_horizon),
Pronostico = pronostico$mean,
Lower_80 = pronostico$lower[,1],
Upper_80 = pronostico$upper[,1],
Lower_95 = pronostico$lower[,2],
Upper_95 = pronostico$upper[,2]
)
# Mostrar los primeros resultados
head(resultados)
# Guardar resultados si es necesario
# write.csv(resultados, "pronostico_resultados.csv", row.names = FALSE)
# Análisis de precisión del modelo
accuracy(pronostico)
# Extraer valores del pronóstico en un formato fácil de usar
resultados <- data.frame(
Fecha = seq.Date(from = end_date + months(1), by = "month", length.out = forecast_horizon),
Pronostico = pronostico$mean,
Lower_80 = pronostico$lower[,1],
Upper_80 = pronostico$upper[,1],
Lower_95 = pronostico$lower[,2],
Upper_95 = pronostico$upper[,2]
)
# Mostrar los primeros resultados
head(resultados)
# Guardar resultados si es necesario
# write.csv(resultados, "pronostico_resultados.csv", row.names = FALSE)
# Análisis de precisión del modelo
accuracy(pronostico)
n <- length(x)  # n = 160 (hasta mayo 2023)
plot(forecast(AA, 20), xlim = c(n - 10, n + 20))
n <- length(x)  # n = 160 (mayo 2023)
plot(forecast(AA, 20), xlim = c(n - 50, n + 50))
n <- length(x)  # n = 160 (mayo 2023)
plot(forecast(AA, 50), xlim = c(n - 50, n + 50))
