knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(tidyverse)
library(pracma)
library(plotly)
library(polynom)
library(matlib)
#Función para calcular la derivada de un spline cúbico
spline_der <- function(pol_spline){
der_poli <- pol_spline
der_poli$coefs <- t(apply(pol_spline$coefs, 1, function(x){polyder(x)}))
der_poli$order <- 3
der_poli_function <- function(x){ppval(der_poli,x)}
return(der_poli_function)
}
der_aprox <- function(df,df_spline,xi){
derivada_real <- df(xi)
derivada_spline <- df_spline(xi)
error_real <- derivada_real-derivada_spline
error_absoluto <- abs(derivada_real-derivada_spline)
error_relativo <- abs(derivada_real-derivada_spline)/abs(derivada_real)
resultados <- list("derivada_real"=derivada_real,"derivada_spline"=derivada_spline,"error_real"=error_real,"error_absoluto"=error_absoluto,"error_relativo"=error_relativo)
return(resultados)
}
valor_aprox <- function(f,f_spline,xi){
valor_real <- f(xi)
valor_spline <- f_spline(xi)
error_real <- valor_real-valor_spline
error_absoluto <- abs(valor_real-valor_spline)
error_relativo <- abs(valor_real-valor_spline)/abs(valor_real)
resultados <- list("valor_real"=valor_real,"valor_spline"=valor_spline,"error_real"=error_real,"error_absoluto"=error_absoluto,"error_relativo"=error_relativo)
return(resultados)
}
f <- function(x){x*cos(x)-3*x}
x_0 <- 0.1
x_n <0.4
f <- function(x){x*cos(x)-3*x}
x_0 <- 0.1
x_n <-0.4
n <- 4
x_nodos <- seq(x_0,x_n,length.out=n)
y_nodos <- f(x_nodos)
mispline <- cubicspline(x_nodos,y_nodos)
mispline_f <- function(x){ppval(mispline,x)}
my_colors <- c("f(x)"="#3281B5","S(x)"="#3C2692","Valores"="#FCB216")
grafica_spline <- ggplot()+
geom_function(aes(color="f(x)"),fun=f)+
geom_function(aes(color="S(x)"),fun=mispline_f,linewidth=0.75)+
geom_point(aes(x_nodos,y_nodos,color="Valores"),size=3)+
scale_color_manual(values=my_colors)+
scale_x_continuous(breaks=x_nodos,limits=c(x_0,x_n))+
labs(x="x",y="y",color="Función")+
theme_classic()
ggplotly(grafica_spline)
df <- function(x){-x*sin(x)-3+cos(x)}
kar_derivada <-spline_der(mispline)
der_nodos <- df(x_nodos)
my_colors <- c("f'(x)"="#269A29","S'(x)"="#F17A00","Valores"="#ED0000")
grafica_derivada <- ggplot()+
geom_function(aes(color="f'(x)"),fun=df)+
geom_function(aes(color="S'(x)"),fun=kar_derivada,linewidth=0.75)+
geom_point(aes(x_nodos,der_nodos,color="Valores"),size=3)+
scale_color_manual(values=my_colors)+
scale_x_continuous(breaks=x_nodos,limits=c(x_0,x_n))+
labs(x="x",y="y",color="Función")+
theme_classic()
ggplotly(grafica_derivada)
valor_aprox(f,mispline_f,0.18)
der_aprox(df,kar_derivada,0.18)
f <- function(x){exp(2*x)}
df <- function(x){2*exp(2*x)}
x_0 <- 0
x_n <- 0.75
n <- 4
x_nodos <- seq(x_0,x_n,length.out=n)
y_nodos <- f(x_nodos)
mispline <- cubicspline(x_nodos,y_nodos,endp2nd=TRUE,der=c(df(x_0),df(x_n)))
mispline_f <- function(x){ppval(mispline,x)}
my_colors <- c("f(x)"="blue","S(x)"="purple","Valores"="pink")
grafica_spline <- ggplot()+
geom_function(aes(color="f(x)"),fun=f)+
geom_function(aes(color="S(x)"),fun=mispline_f,linewidth=0.75)+
geom_point(aes(x_nodos,y_nodos,color="Valores"),size=3)+
scale_color_manual(values=my_colors)+
scale_x_continuous(breaks=x_nodos,limits=c(x_0,x_n))+
labs(x="x",y="y",color="Función")+
theme_classic()
ggplotly(grafica_spline)
df <- function(x){2*exp(2*x)}
kar_derivada <-spline_der(mispline)
der_nodos <- df(x_nodos)
my_colors <- c("f'(x)"="green","S'(x)"="tomato3","Valores"="firebrick")
grafica_derivada <- ggplot()+
geom_function(aes(color="f'(x)"),fun=df)+
geom_function(aes(color="S'(x)"),fun=kar_derivada,linewidth=0.75)+
geom_point(aes(x_nodos,der_nodos,color="Valores"),size=3)+
scale_color_manual(values=my_colors)+
scale_x_continuous(breaks=x_nodos,limits=c(x_0,x_n))+
labs(x="x",y="y",color="Función")+
theme_classic()
ggplotly(grafica_derivada)
valor_aprox(f,mispline_f,0.43)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(tidyverse)
library(pracma)
library(plotly)
library(polynom)
library(matlib)
#Función para calcular la derivada de un spline cúbico
spline_der <- function(pol_spline){
der_poli <- pol_spline
der_poli$coefs <- t(apply(pol_spline$coefs, 1, function(x){polyder(x)}))
der_poli$order <- 3
der_poli_function <- function(x){ppval(der_poli,x)}
return(der_poli_function)
}
der_aprox <- function(df,df_spline,xi){
derivada_real <- df(xi)
derivada_spline <- df_spline(xi)
error_real <- derivada_real-derivada_spline
error_absoluto <- abs(derivada_real-derivada_spline)
error_relativo <- abs(derivada_real-derivada_spline)/abs(derivada_real)
resultados <- list("derivada_real"=derivada_real,"derivada_spline"=derivada_spline,"error_real"=error_real,"error_absoluto"=error_absoluto,"error_relativo"=error_relativo)
return(resultados)
}
valor_aprox <- function(f,f_spline,xi){
valor_real <- f(xi)
valor_spline <- f_spline(xi)
error_real <- valor_real-valor_spline
error_absoluto <- abs(valor_real-valor_spline)
error_relativo <- abs(valor_real-valor_spline)/abs(valor_real)
resultados <- list("valor_real"=valor_real,"valor_spline"=valor_spline,"error_real"=error_real,"error_absoluto"=error_absoluto,"error_relativo"=error_relativo)
return(resultados)
}
valor_aprox(f,mispline_f,0.43)
f <- function(x){exp(2*x)}
df <- function(x){2*exp(2*x)}
x_0 <- 0
x_n <- 0.75
n <- 4
x_nodos <- seq(x_0,x_n,length.out=n)
y_nodos <- f(x_nodos)
mispline <- cubicspline(x_nodos,y_nodos,endp2nd=TRUE,der=c(df(x_0),df(x_n)))
mispline_f <- function(x){ppval(mispline,x)}
my_colors <- c("f(x)"="blue","S(x)"="purple","Valores"="pink")
grafica_spline <- ggplot()+
geom_function(aes(color="f(x)"),fun=f)+
geom_function(aes(color="S(x)"),fun=mispline_f,linewidth=0.75)+
geom_point(aes(x_nodos,y_nodos,color="Valores"),size=3)+
scale_color_manual(values=my_colors)+
scale_x_continuous(breaks=x_nodos,limits=c(x_0,x_n))+
labs(x="x",y="y",color="Función")+
theme_classic()
ggplotly(grafica_spline)
df <- function(x){2*exp(2*x)}
kar_derivada <-spline_der(mispline)
der_nodos <- df(x_nodos)
my_colors <- c("f'(x)"="green","S'(x)"="tomato3","Valores"="firebrick")
grafica_derivada <- ggplot()+
geom_function(aes(color="f'(x)"),fun=df)+
geom_function(aes(color="S'(x)"),fun=kar_derivada,linewidth=0.75)+
geom_point(aes(x_nodos,der_nodos,color="Valores"),size=3)+
scale_color_manual(values=my_colors)+
scale_x_continuous(breaks=x_nodos,limits=c(x_0,x_n))+
labs(x="x",y="y",color="Función")+
theme_classic()
ggplotly(grafica_derivada)
valor_aprox(f,mispline_f,0.43)
der_aprox(df,karen_derivada,0.43)
der_aprox(df,kar_derivada,0.43)
f <- function(x){x*log(x)}
df <- function(x){1+log(x)}
x_0 <- 2
x_n <- 12
n <- 6
x_nodos <- seq(x_0,x_n,length.out=n)
y_nodos <- f(x_nodos)
mispline <- cubicspline(x_nodos,y_nodos,endp2nd=TRUE,der=c(df(x_0),df(x_n)))
mispline_f <- function(x){ppval(mispline,x)}
my_colors <- c("f(x)"="#009081","S(x)"="#44A75D","Valores"="#040404")
grafica_spline <- ggplot()+
geom_function(aes(color="f(x)"),fun=f)+
geom_function(aes(color="S(x)"),fun=mispline_f,linewidth=0.75)+
geom_point(aes(x_nodos,y_nodos,color="Valores"),size=3)+
scale_color_manual(values=my_colors)+
scale_x_continuous(breaks=x_nodos,limits=c(x_0,x_n))+
labs(x="x",y="y",color="Función")+
theme_classic()
ggplotly(grafica_spline)
df <- function(x){1+log(x)}
kar_derivada <-spline_der(mispline)
der_nodos <- df(x_nodos)
my_colors <- c("f'(x)"="green","S'(x)"="tomato3","Valores"="firebrick")
grafica_derivada <- ggplot()+
geom_function(aes(color="f'(x)"),fun=df)+
geom_function(aes(color="S'(x)"),fun=kar_derivada,linewidth=0.75)+
geom_point(aes(x_nodos,der_nodos,color="Valores"),size=3)+
scale_color_manual(values=my_colors)+
scale_x_continuous(breaks=x_nodos,limits=c(x_0,x_n))+
labs(x="x",y="y",color="Función")+
theme_classic()
ggplotly(grafica_derivada)
df <- function(x){1+log(x)}
kar_derivada <-spline_der(mispline)
der_nodos <- df(x_nodos)
my_colors <- c("f'(x)"="green","S'(x)"="gray","Valores"="firebrick")
grafica_derivada <- ggplot()+
geom_function(aes(color="f'(x)"),fun=df)+
geom_function(aes(color="S'(x)"),fun=kar_derivada,linewidth=0.75)+
geom_point(aes(x_nodos,der_nodos,color="Valores"),size=3)+
scale_color_manual(values=my_colors)+
scale_x_continuous(breaks=x_nodos,limits=c(x_0,x_n))+
labs(x="x",y="y",color="Función")+
theme_classic()
ggplotly(grafica_derivada)
df <- function(x){1+log(x)}
kar_derivada <-spline_der(mispline)
der_nodos <- df(x_nodos)
my_colors <- c("f'(x)"="green","S'(x)"="gray","Valores"="black")
grafica_derivada <- ggplot()+
geom_function(aes(color="f'(x)"),fun=df)+
geom_function(aes(color="S'(x)"),fun=kar_derivada,linewidth=0.75)+
geom_point(aes(x_nodos,der_nodos,color="Valores"),size=3)+
scale_color_manual(values=my_colors)+
scale_x_continuous(breaks=x_nodos,limits=c(x_0,x_n))+
labs(x="x",y="y",color="Función")+
theme_classic()
ggplotly(grafica_derivada)
valor_aprox(f,mispline_f,8.4)
der_aprox(df,kar_derivada,8.4)
f <- function(x){{1}/{1+25*x^2}}
df <- function(x){-{50*x}/{1+25*x^2}^{2}}
x_0 <- -1
x_n <- 1
n <- 51
x_nodos <- seq(x_0,x_n,length.out=n)
y_nodos <- f(x_nodos)
mispline <- cubicspline(x_nodos,y_nodos,endp2nd=TRUE,der=c(df(x_0),df(x_n)))
mispline_f <- function(x){ppval(mispline,x)}
my_colors <- c("f(x)"="#009081","S(x)"="#44A75D","Valores"="#040404")
grafica_spline <- ggplot()+
geom_function(aes(color="f(x)"),fun=f)+
geom_function(aes(color="S(x)"),fun=mispline_f,linewidth=0.75)+
geom_point(aes(x_nodos,y_nodos,color="Valores"),size=3)+
scale_color_manual(values=my_colors)+
scale_x_continuous(breaks=x_nodos,limits=c(x_0,x_n))+
labs(x="x",y="y",color="Función")+
theme_classic()
ggplotly(grafica_spline)
df <- function(x){-{50*x}/{1+25*x^2}^{2}}
kar_derivada <-spline_der(mispline)
#Función para calcular la derivada de un spline cúbico
spline_der <- function(pol_spline){
der_poli <- pol_spline
der_poli$coefs <- t(apply(pol_spline$coefs, 1, function(x){polyder(x)}))
der_poli$order <- 3
der_poli_function <- function(x){ppval(der_poli,x)}
return(der_poli_function)
}
df <- function(x){-{50*x}/{1+25*x^2}^{2}}
kar_derivada <-spline_der(mispline)
der_nodos <- df(x_nodos)
my_colors <- c("f'(x)"="green","S'(x)"="gray","Valores"="black")
grafica_derivada <- ggplot()+
geom_function(aes(color="f'(x)"),fun=df)+
geom_function(aes(color="S'(x)"),fun=kar_derivada,linewidth=0.75)+
geom_point(aes(x_nodos,der_nodos,color="Valores"),size=3)+
scale_color_manual(values=my_colors)+
scale_x_continuous(breaks=x_nodos,limits=c(x_0,x_n))+
labs(x="x",y="y",color="Función")+
theme_classic()
ggplotly(grafica_derivada)
valor_aprox(f,mispline_f,0.9)
#Función para calcular la derivada de un spline cúbico
spline_der <- function(pol_spline){
der_poli <- pol_spline
der_poli$coefs <- t(apply(pol_spline$coefs, 1, function(x){polyder(x)}))
der_poli$order <- 3
der_poli_function <- function(x){ppval(der_poli,x)}
return(der_poli_function)
}
der_aprox <- function(df,df_spline,xi){
derivada_real <- df(xi)
derivada_spline <- df_spline(xi)
error_real <- derivada_real-derivada_spline
error_absoluto <- abs(derivada_real-derivada_spline)
error_relativo <- abs(derivada_real-derivada_spline)/abs(derivada_real)
resultados <- list("derivada_real"=derivada_real,"derivada_spline"=derivada_spline,"error_real"=error_real,"error_absoluto"=error_absoluto,"error_relativo"=error_relativo)
return(resultados)
}
valor_aprox <- function(f,f_spline,xi){
valor_real <- f(xi)
valor_spline <- f_spline(xi)
error_real <- valor_real-valor_spline
error_absoluto <- abs(valor_real-valor_spline)
error_relativo <- abs(valor_real-valor_spline)/abs(valor_real)
resultados <- list("valor_real"=valor_real,"valor_spline"=valor_spline,"error_real"=error_real,"error_absoluto"=error_absoluto,"error_relativo"=error_relativo)
return(resultados)
}
valor_aprox(f,mispline_f,0.9)
der_aprox(df,kar_derivada,0.9)
f <- function(x){x*cos(x)-2*x^2+3*x-1}
df <- function(x){-{50*x}/{1+25*x^2}^{2}}
x_0 <- 0
x_n <- 2
n <- 5
x_nodos <- seq(x_0,x_n,length.out=n)
y_nodos <- f(x_nodos)
mispline <- cubicspline(x_nodos,y_nodos,endp2nd=TRUE,der=c(df(x_0),df(x_n)))
mispline_f <- function(x){ppval(mispline,x)}
my_colors <- c("f(x)"="#009081","S(x)"="#44A75D","Valores"="#040404")
grafica_spline <- ggplot()+
geom_function(aes(color="f(x)"),fun=f)+
geom_function(aes(color="S(x)"),fun=mispline_f,linewidth=0.75)+
geom_point(aes(x_nodos,y_nodos,color="Valores"),size=3)+
scale_color_manual(values=my_colors)+
scale_x_continuous(breaks=x_nodos,limits=c(x_0,x_n))+
labs(x="x",y="y",color="Función")+
theme_classic()
ggplotly(grafica_spline)
f <- function(x){x*cos(x)-2*x^2+3*x-1}
df <- function(x){-{50*x}/{1+25*x^2}^{2}}
x_0 <- 0
x_n <- 2
n <- 5
x_nodos <- seq(x_0,x_n,length.out=n)
y_nodos <- f(x_nodos)
mispline <- cubicspline(x_nodos,y_nodos,endp2nd=TRUE,der=c(df(x_0),df(x_n)))
mispline_f <- function(x){ppval(mispline,x)}
my_colors <- c("f(x)"="brown3","S(x)"="#44A75D","Valores"="#040404")
grafica_spline <- ggplot()+
geom_function(aes(color="f(x)"),fun=f)+
geom_function(aes(color="S(x)"),fun=mispline_f,linewidth=0.75)+
geom_point(aes(x_nodos,y_nodos,color="Valores"),size=3)+
scale_color_manual(values=my_colors)+
scale_x_continuous(breaks=x_nodos,limits=c(x_0,x_n))+
labs(x="x",y="y",color="Función")+
theme_classic()
ggplotly(grafica_spline)
df <- function(x){-x*sin(x)-4*x+3+cos(x)}
kar_derivada <-spline_der(mispline)
der_nodos <- df(x_nodos)
my_colors <- c("f'(x)"="green","S'(x)"="gray","Valores"="black")
grafica_derivada <- ggplot()+
geom_function(aes(color="f'(x)"),fun=df)+
geom_function(aes(color="S'(x)"),fun=kar_derivada,linewidth=0.75)+
geom_point(aes(x_nodos,der_nodos,color="Valores"),size=3)+
scale_color_manual(values=my_colors)+
scale_x_continuous(breaks=x_nodos,limits=c(x_0,x_n))+
labs(x="x",y="y",color="Función")+
theme_classic()
ggplotly(grafica_derivada)
valor_aprox(f,mispline_f,0.9)
valor_aprox(f,mispline_f,0.25)
der_aprox(df,kar_derivada,0.25)
f <- function(x){x*cos(x)-3*x}
df <- function(x){-x*sin(x)-3+cos(x)}
x_0 <- 0.1
x_n <- 0.4
n <- 4
x_nodos <- seq(x_0,x_n,length.out=n)
y_nodos <- f(x_nodos)
mispline <- cubicspline(x_nodos,y_nodos,endp2nd=TRUE,der=c(df(x_0),df(x_n)))
mispline_f <- function(x){ppval(mispline,x)}
my_colors <- c("f(x)"="brown3","S(x)"="#44A75D","Valores"="#040404")
grafica_spline <- ggplot()+
geom_function(aes(color="f(x)"),fun=f)+
geom_function(aes(color="S(x)"),fun=mispline_f,linewidth=0.75)+
geom_point(aes(x_nodos,y_nodos,color="Valores"),size=3)+
scale_color_manual(values=my_colors)+
scale_x_continuous(breaks=x_nodos,limits=c(x_0,x_n))+
labs(x="x",y="y",color="Función")+
theme_classic()
ggplotly(grafica_spline)
df <- function(x){-x*sin(x)-4*x+3+cos(x)}
kar_derivada <-spline_der(mispline)
der_nodos <- df(x_nodos)
my_colors <- c("f'(x)"="green","S'(x)"="gray","Valores"="black")
grafica_derivada <- ggplot()+
geom_function(aes(color="f'(x)"),fun=df)+
geom_function(aes(color="S'(x)"),fun=kar_derivada,linewidth=0.75)+
geom_point(aes(x_nodos,der_nodos,color="Valores"),size=3)+
scale_color_manual(values=my_colors)+
scale_x_continuous(breaks=x_nodos,limits=c(x_0,x_n))+
labs(x="x",y="y",color="Función")+
theme_classic()
ggplotly(grafica_derivada)
valor_aprox(f,mispline_f,0.18)
der_aprox(df,kar_derivada,0.18)
datos<- tibble(tem=c(50,60,65,75,80),
rho=c(988,985.7,980.5,974.8,971.6))
sp_temp<-cubicspline(datos$temp, datos$rho)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(tidyverse)
library(pracma)
library(plotly)
library(polynom)
library(matlib)
#Función para calcular la derivada de un spline cúbico
spline_der <- function(pol_spline){
der_poli <- pol_spline
der_poli$coefs <- t(apply(pol_spline$coefs, 1, function(x){polyder(x)}))
der_poli$order <- 3
der_poli_function <- function(x){ppval(der_poli,x)}
return(der_poli_function)
}
der_aprox <- function(df,df_spline,xi){
derivada_real <- df(xi)
derivada_spline <- df_spline(xi)
error_real <- derivada_real-derivada_spline
error_absoluto <- abs(derivada_real-derivada_spline)
error_relativo <- abs(derivada_real-derivada_spline)/abs(derivada_real)
resultados <- list("derivada_real"=derivada_real,"derivada_spline"=derivada_spline,"error_real"=error_real,"error_absoluto"=error_absoluto,"error_relativo"=error_relativo)
return(resultados)
}
valor_aprox <- function(f,f_spline,xi){
valor_real <- f(xi)
valor_spline <- f_spline(xi)
error_real <- valor_real-valor_spline
error_absoluto <- abs(valor_real-valor_spline)
error_relativo <- abs(valor_real-valor_spline)/abs(valor_real)
resultados <- list("valor_real"=valor_real,"valor_spline"=valor_spline,"error_real"=error_real,"error_absoluto"=error_absoluto,"error_relativo"=error_relativo)
return(resultados)
}
datos<- tibble(tem=c(50,60,65,75,80),
rho=c(988,985.7,980.5,974.8,971.6))
sp_temp<-cubicspline(datos$temp, datos$rho)
datos<- tibble(temp=c(50,60,65,75,80),
rho=c(988,985.7,980.5,974.8,971.6))
sp_temp<-cubicspline(datos$temp, datos$rho)
sp_temp_f<-function(x){ppval(sp_temp_f, x)}
library(tibble)
library(pracma)
datos <- tibble(
temp = c(50, 60, 65, 75, 80),
rho = c(988, 985.7, 980.5, 974.8, 971.6)
)
sp_temp <- cubicspline(datos$temp, datos$rho)
sp_temp_f <- function(x) {ppval(sp_temp, x)}
poli_temp<-polyfit(datos$temp, datos$rho, n=4)
poli_temp_f<- function(x){polyval((poli_temp,x))}
library(tibble)
library(pracma)
datos <- tibble(
temp = c(50, 60, 65, 75, 80),
rho = c(988, 985.7, 980.5, 974.8, 971.6)
)
sp_temp <- cubicspline(datos$temp, datos$rho)
sp_temp_f <- function(x) {ppval(sp_temp, x)}
poli_temp<-polyfit(datos$temp, datos$rho, n=4)
poli_temp_f<- function(x){polyval((poli_temp, x))}
library(tibble)
library(pracma)
datos <- tibble(
temp = c(50, 60, 65, 75, 80),
rho = c(988, 985.7, 980.5, 974.8, 971.6)
)
sp_temp <- cubicspline(datos$temp, datos$rho)
sp_temp_f <- function(x) {ppval(sp_temp, x)}
poli_temp<-polyfit(datos$temp, datos$rho, n=4)
poli_temp_f<- function(x){polyval(poli_temp,x)}
my_colors <- c("Densidad" = "#6696BF","polinomio"="cyan", "Valores" = "#CB2C3E")
graf_muestras<-ggplot()+
geom_function(aes(color="Densidad"), fun= sp_temp_f, linewidth=1.2)+
geom_function(aes(color="polinomio"), fun= poli_temp_f, linewidth=.75)+
geom_function(aes(datos$temp, datos$rho, color="valores"),size=2.5)+
scale_color_manual(values=my_colors)+
scale_x_continuous(breaks = datos$temp)+
labs(x="tem", y="Den", color="", title = "REla", subtitle="")+
theme_bw()
library(tibble)
library(pracma)
library(ggplot2)
datos <- tibble(
temp = c(50, 60, 65, 75, 80),
rho = c(988, 985.7, 980.5, 974.8, 971.6)
)
sp_temp <- cubicspline(datos$temp, datos$rho)
sp_temp_f <- function(x) {ppval(sp_temp, x)}
poli_temp <- polyfit(datos$temp, datos$rho, n = 4)
poli_temp_f <- function(x) {polyval(poli_temp, x)}
my_colors <- c("Densidad" = "#6696BF", "Polinomio" = "cyan", "Valores" = "#CB2C3E")
graf_muestras <- ggplot() +
geom_function(aes(color = "Densidad"), fun = sp_temp_f, size = 1.2) +
geom_function(aes(color = "Polinomio"), fun = poli_temp_f, size = 0.75) +
geom_point(aes(x = temp, y = rho, color = "Valores"), data = datos, size = 2.5) +
scale_color_manual(values = my_colors) +
scale_x_continuous(breaks = datos$temp) +
labs(x = "Temperatura", y = "Densidad", color = "", title = "Relación entre Temperatura y Densidad", subtitle = "") +
theme_bw()
print(graf_muestras)
f<-function(x){sin(log(x))}
x0<-1
xn<-3
my_colors <- c("S_4(x)" = "#6696BF", "S_5(x)" = "black","S_10(x)" = "#669","S_20(x)" = "red3")
nodos<-c(4,5,10,20)
grafica<-ggplot()
for (k in nodos) {
x_nodos<- seq(x0, xn, lenth.out=k)
sp<-cubicspline(x_nodos,f(x_nodos))
sp_f<-function(x){ppval(sp,x)}
grafica<-grafica +
geom_function(aes(color = names(my_colors)[k], fun = sp_f, linewith=1.2) +
#geom_point(aes(x = temp, y = rho, color = "Valores"), data = datos, size = 2.5) +
scale_color_manual(values = my_colors) +
scale_x_continuous(breaks = x_nodos) +
#labs(x = "Temperatura", y = "Densidad", color = "", title = "Relación entre Temperatura y Densidad", subtitle = "") +
theme_bw()
print(grafica)
f<-function(x){exp(2*x)}
