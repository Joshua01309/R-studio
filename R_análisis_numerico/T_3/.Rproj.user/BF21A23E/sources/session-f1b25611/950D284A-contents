---
title: "Tarea 3. Splines cúbicos."
author: "Análisis Numérico."
date: "Febrero del 2024"
output: 
  prettydoc::html_pretty:
    toc: true
    theme: architect
header-includes:
   - \usepackage{amsmath}
---





<style>
body {
text-align: justify}
</style>



```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(tidyverse)
library(pracma)
library(plotly)
library(polynom)
library(matlib)
```


# Ejercicio 1.

En cada inciso considera la función de valores reales, usa splines cúbicos  para encontrar una aproximación en el intervalo dado. Realiza también una gráfica para la aproximación de la derivada. Calcula el valor de la función, de la derivada en el valor indicado; en cada caso calcula el error real, el absoluto y el relativo.

```{r}
#Función para calcular la derivada de un spline cúbico

spline_der <- function(pol_spline){
  der_poli <- my_spline 
  der_poli$coefs <- t(apply(pol_spline$coefs, 1, function(x){polyder(x)}))
  der_poli$order <- 3
  der_poli_function <- function(x){ppval(der_poli,x)}
  return(der_poli_function)
}
```



a) $f(x)=e^{2x}$.  Puntos: $x_0=0, x_1=0.25, x_2=0.5, x_3=0.75$.  Aproximar $f(0.43)$ y $f'(0.43)$.

```{r}
f <- function(x){exp(2*x)}

x_0 <- 0
x_n <- 0.75
n<-4

x_nodos<-seq(x_0,x_n, length.out=n)
y_nodos<-f(x_nodos)


my_spline<-cubicspline(x_nodos,y_nodos,)
myspline_f<-function(x){ppval(my_spline,x)}

my_colors<-c("f(x)"="firebrick","S(x)"="gray3", "Valores"="gold3")

grafica_spline<-ggplot()+
  geom_function(aes(color="f(x)"),fun=f)+
  geom_function(aes(color="S(x)"),fun=myspline_f, linewidth=0.75)+
  geom_point(aes(x_nodos,y_nodos, color="Valores"), size=3)+
  scale_color_manual(values = my_colors)+
  scale_x_continuous(breaks = x_nodos,limits=c(x_0,x_n))+
  labs(x="x", y="y", color="Función")+
  theme_light()

ggplotly(grafica_spline)
```

```{r}
df <- function(x){exp(2*x)}
spline_df<-spline_der(my_spline)

x_0 <- 0
x_n <- 0.75
n<-4

der_nodos<-df(x_nodos)

my_colors<-c("f'(x)"="green2","S'(x)"="red2", "Valores"="blue3")

grafica_df<-ggplot()+
  geom_function(aes(color="f'(x)"),fun=df)+
  geom_function(aes(color="S'(x)"),fun=df, linewidth=0.75)+
  geom_point(aes(x_nodos,der_nodos, color="Valores"), size=3)+
  scale_color_manual(values = my_colors)+
  scale_x_continuous(breaks = x_nodos,limits=c(x_0,x_n))+
  labs(x="x", y="y", color="Función")+
  theme_light()

ggplotly(grafica_df)
```

```{r}
df <- function(x){2*exp(2*x)}
oli_derivada <- spline_der(my_spline)

der_nodos <- df(x_nodos)

my_colors<-c("f(x)"="green","S(x)"="blue", "Valores"="gold1")

grafica_derivada<-ggplot()+
  geom_function(aes(color="f(x)"),fun=df)+
  geom_function(aes(color="S(x)"),fun=oli_derivada, linewidth=0.75)+
  geom_point(aes(x_nodos,der_nodos, color="Valores"), size=3)+
  scale_color_manual(values = my_colors)+
  scale_x_continuous(breaks = x_nodos,limits=c(x_0,x_n))+
  labs(x="x", y="y", color="Función")+
  theme_light()

ggplotly(grafica_derivada)
```

```{r}
valor_aprox<-function(f,f_spline,xi){
  valor_real<-f(xi)
  valor_spline<-f_spline(xi)
  error_real<-valor_real-valor_spline
  error_abs<-abs(valor_real-valor_spline)
  error_relativo<- abs(valor_real-valor_spline)/abs(valor_real)
  resultados<-list("valor real"=valor_real, "valor spline"=valor_spline, "error relativo"=error_relativo, "error real"=error_real, "error absoluto"=error_abs)
  return(resultados)
}
```

```{r}
valor_aprox(f,myspline_f, 0.43)
```

```{r}
der_aprox<-function(df,df_spline,xi){
  derivada_real<-df(xi)
  derivada_spline<-df_spline(xi)
  error_real<-derivada_real-derivadar_spline
  error_abs<-abs(derivada_real-derivada_spline)
  error_relativo<- abs(derivada_real-derivada_spline)/abs(derivada_real)
  resultados<-list("derivada real"=derivada_real, "derivada spline"=derivada_spline, "error relativo"=error_relativo, "error real"=error_real, "error absoluto"=error_abs)
  return(resultados)
}
```

```{r}
der_aprox(df, ,0.43)
```



b) $f(x)=x\, log(x)$, $x\in [2,12]$, $h=2$.  Aproximar $f(8.4)$ y $f'(8.4)$. 

```{r}
f <- function(x){log(x)}

x_0 <- 0
x_n <- 0.75
n<-4

x_nodos<-seq(x_0,x_n, length.out=n)
y_nodos<-f(x_nodos)


my_spline<-cubicspline(x_nodos,y_nodos,)
myspline_f<-function(x){ppval(my_spline,x)}

my_colors<-c("f(x)"="firebrick","S(x)"="gray3", "Valores"="gold3")

grafica_spline<-ggplot()+
  geom_function(aes(color="f(x)"),fun=f)+
  geom_function(aes(color="S(x)"),fun=myspline_f, linewidth=0.75)+
  geom_point(aes(x_nodos,y_nodos, color="Valores"), size=3)+
  scale_color_manual(values = my_colors)+
  scale_x_continuous(breaks = x_nodos,limits=c(x_0,x_n))+
  labs(x="x", y="y", color="Función")+
  theme_light()

ggplotly(grafica_spline)
```


c) $f(x)=\frac{1}{1+25x^2}$, $x\in [-1,1]$, $h=2/50$.  Aproximar $f(0.9)$ y $f'(0.9)$.

d) $f(x)=x\, cos\,x-2x^2+3x-1$. $x\in [0,2]$, $h=0.5$.  Aproximar $f(0.25)$ y $f'(0.25)$.

e) $f(x)=x\,cos\,x-3x$.  Puntos: $x_0=0.1, x_1=0.2, x_2=0.3, x_3=0.4$.  Aproximar $f(0.18)$ y $f'(0.18)$.


# Ejercicio 2 

Encuentra los splines cúbicos condicionados para las funciones del ejercicio anterior.


# Ejercicio 3

Se sospecha que las elevadas concentraciones de tanina en las hojas de los robles maduros inhiben el crecimiento de las larvas de la polilla invernal (*Operophtera bromata L. Geometridae*) que tanto dañan a los árboles en algunos años.  La tabla anexa contiene el peso promedio de dos muestras de larva, tomadas en los primeros 28 días después de nacimiento.  La primera muestra se crió en hojas de robles jóvenes, mientras que la segunda lo hizo en hojas maduras del mismo árbol.

a) Usa splines cúbicos para aproximar la curva del peso promedio de las muestras.

b) Para calcular un peso promedio máximo aproximado de cada muestra, determina el máximo del spline cúbico.

\begin{equation}
\begin{array}{l|c|c|c|c|c|c|r} 
\text{Día} & 0 & 6 & 10 & 13 & 17 & 20 & 28 \\
\hline \text{Peso promedio muestra 1 (mg)} & 6.67 & 17.33 & 42.67 & 37.33 & 30.10 & 29.31 & 28.74 \\
\text{Peso promedio muestra 2 (mg)} & 6.67 & 16.11 & 18.89 & 15.00 & 10.56 & 9.44 & 8.89
\end{array}
\end{equation}


# Ejercicio 4

Considera la siguiente tabla de datos para el agua:

\begin{equation}
\begin{array}{|l|c|c|c|c|c|} 
\hline \text{T(°C)} & 50 & 60 & 65 & 75 & 80\\
 \text{$\rho (kg/m^3)$} & 988 & 985.7 & 980.5 & 974.8 & 971.6  \\
\hline
\end{array}
\end{equation}


Donde $T$ es la temperatura y $\rho$ es la densidad.  

a) Hacer la representación gráfica del spline cúbico y compararlo con el polinomio interpolante $P_4(x)$.

b) Aproximar la densidad para $T=63 °C$ y también la derivada.


# Ejercicio 5

Construye los splines cúbicos condicionados en $n$ nodos, donde $n= 4,5, 10, 20$ para las siguientes funciones en el intervalo dado. 

a) $f(x) = e^{2x}\, cos 3x$, $[0,2]$. 

b) $f(x) = sen(log\,x)$, $[1,3]$.

c) $f(x) = e^{x}+e^{-x}$, $[0,2]$. 

d) $f(x) = cos \,x+sen\,x$, $[0,2\pi]$.



# Ejercicio 6

Dada la partición $x_0=0, x_1=0.5, x_2=1$, del intervalo $[0,1]$, encuentra el spline cúbico $S$ para $f(x)=e^{2x}$.  Aproxima $\int_0^{1} e^{2x}\,dx$ con  $\int_0^{1} S(x)\,dx$ y compara el resultado con el valor real.








