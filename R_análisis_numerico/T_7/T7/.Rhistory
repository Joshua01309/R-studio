graf<-ggplot()+
geom_line(aes(sol_aprox$t, sol_aprox$y), color="cyan")
theme_bw()
ggplotly(graf)
f<-function(t,y){
0.07*y-0.00014*y^2
}
y0<-100
sol_aprox<-rkf54(f,0,50,y0)
graf<-ggplot()+
geom_line(aes(sol_aprox$t, sol_aprox$y), color="cyan")
theme_bw()
ggplotly(graf)
f<-function(t,y){
0.07*y-0.00014*y^2
}
y0<-100
sol_aprox<-rkf54(f,0,50,y0)
ggplot()+
geom_line(aes(sol_aprox$t, sol_aprox$y), color="cyan")
f<-function(t,y){
0.07*y-0.00014*y^2
}
y0<-1
sol_aprox<-rkf54(f,0,50,y0)
ggplot()+
geom_line(aes(sol_aprox$t, sol_aprox$y), color="cyan")
f<-function(t,y){
0.07*y-0.00014*y^2
}
y0<-0
sol_aprox<-rkf54(f,0,50,y0)
ggplot()+
geom_line(aes(sol_aprox$t, sol_aprox$y), color="cyan")
f<-function(t,y){
0.07*y-0.00014*y^2
}
y0<-0
sol_aprox<-rkf54(f,0,0,y0)
ggplot()+
geom_line(aes(sol_aprox$t, sol_aprox$y), color="cyan")
f<-function(t,y){
0.15*y(1-y/10000)*(1-700/y)
}
y0<-1
sol_aprox<-euler_heun(f,0,200,y0,n=300)
f<-function(t,y){
0.15*y*(1-y/10000)*(1-700/y)
}
y0<-1
sol_aprox<-euler_heun(f,0,200,y0,n=300)
ggplot()+
geom_line(aes(sol_aprox$t, sol_aprox$y), color="cyan")
f<-function(t,y){
0.15*y*(1-y/10000)*(1-700/y)
}
y0<-1
sol_aprox<-euler_heun(f,0,100,y0,n=300)
ggplot()+
geom_line(aes(sol_aprox$t, sol_aprox$y), color="cyan")
f<-function(t,y){
0.15*y*(1-y/10000)*(1-700/y)
}
y0<-1
sol_aprox<-euler_heun(f,0,20,y0,n=300)
ggplot()+
geom_line(aes(sol_aprox$t, sol_aprox$y), color="cyan")
f<-function(t,y){
0.15*y*(1-y/10000)*(1-700/y)
}
y0<-100
sol_aprox<-euler_heun(f,0,20,y0,n=300)
ggplot()+
geom_line(aes(sol_aprox$t, sol_aprox$y), color="cyan")
f<-function(t,y){
0.15*y*(1-y/10000)*(1-700/y)
}
y0<-100
sol_aprox<-euler_heun(f,0,100,y0,n=300)
ggplot()+
geom_line(aes(sol_aprox$t, sol_aprox$y), color="cyan")
f<-function(t,y){
0.15*y*(1-y/10000)*(1-700/y)
}
y0<-50
sol_aprox<-euler_heun(f,0,50,y0,n=300)
ggplot()+
geom_line(aes(sol_aprox$t, sol_aprox$y), color="cyan")
f<-function(t,y){
0.15*y*(1-y/10000)*(1-700/y)
}
y0<-1000
sol_aprox<-euler_heun(f,0,50,y0,n=300)
ggplot()+
geom_line(aes(sol_aprox$t, sol_aprox$y), color="cyan")
f<-function(t,y){
0.15*y*(1-y/10000)*(1-700/y)
}
y0<-1000
sol_aprox<-euler_heun(f,0,100,y0,n=300)
ggplot()+
geom_line(aes(sol_aprox$t, sol_aprox$y), color="cyan")
f<-function(t,y){
0.15*y*(1-y/10000)*(1-700/y)
}
y0<-1000
sol_aprox<-euler_heun(f,0,80,y0,n=300)
ggplot()+
geom_line(aes(sol_aprox$t, sol_aprox$y), color="cyan")
f<-function(t,y){
0.15*y*(1-y/10000)*(1-700/y)
}
y0<-1000
sol_aprox<-euler_heun(f,0,60,y0,n=300)
ggplot()+
geom_line(aes(sol_aprox$t, sol_aprox$y), color="cyan")
dy <- function(x,y){
4*x
}
y_sol <- function(x){
2*x^2+4
}
my_euler <- function(dy, a,b, N, y0){
h <- (b-a)/N
T <- a
W <- y0
for (k in 1:N) {
w_new <- W[k]+ h*dy(T[k], W[k])
T <- c(T, T[k]+h)
W <- c(W, w_new)
}
resultados <- list("T"=T, "W"=W)
return(resultados)
}
sol_aprox <- my_euler(dy, 0, 1, 2, 1)
my_colors=c("y(x)"="firebrick", "w(x)"="dodgerblue")
graf<-ggplot()+
geom_function(aes(color="y(x)"),fun=y_sol, xlim=c(0,1))+
geom_line(aes(sol_aprox$T,sol_aprox$W, color="w(x)"))+
scale_color_manual(values=my_colors)+
labs(x="x", y="y(x)", color=" ")+
theme_bw()
ggplotly(graf)
dy <- function(x,y){
4*x
}
y_sol <- function(x){
2*x^2+4
}
my_euler <- function(dy, a,b, N, y0){
h <- (b-a)/N
T <- a
W <- y0
for (k in 1:N) {
w_new <- W[k]+ h*dy(T[k], W[k])
T <- c(T, T[k]+h)
W <- c(W, w_new)
}
resultados <- list("T"=T, "W"=W)
return(resultados)
}
sol_aprox <- my_euler(dy, 0, 1, 1/2, 1)
my_colors=c("y(x)"="firebrick", "w(x)"="dodgerblue")
graf<-ggplot()+
geom_function(aes(color="y(x)"),fun=y_sol, xlim=c(0,1))+
geom_line(aes(sol_aprox$T,sol_aprox$W, color="w(x)"))+
scale_color_manual(values=my_colors)+
labs(x="x", y="y(x)", color=" ")+
theme_bw()
ggplotly(graf)
sol_aprox
dy <- function(x,y){
4*x
}
y_sol <- function(x){
2*x^2+4
}
my_euler <- function(dy, a,b, N, y0){
h <- (b-a)/N
T <- a
W <- y0
for (k in 1:N) {
w_new <- W[k]+ h*dy(T[k], W[k])
T <- c(T, T[k]+h)
W <- c(W, w_new)
}
resultados <- list("T"=T, "W"=W)
return(resultados)
}
sol_aprox <- my_euler(dy, 0, 1, 0.5, 1)
my_colors=c("y(x)"="firebrick", "w(x)"="dodgerblue")
graf<-ggplot()+
geom_function(aes(color="y(x)"),fun=y_sol, xlim=c(0,1))+
geom_line(aes(sol_aprox$T,sol_aprox$W, color="w(x)"))+
scale_color_manual(values=my_colors)+
labs(x="x", y="y(x)", color=" ")+
theme_bw()
ggplotly(graf)
sol_aprox
dy <- function(x,y){
4*x
}
y_sol <- function(x){
2*x^2+4
}
my_euler <- function(dy, a,b, N, y0){
h <- (b-a)/N
T <- a
W <- y0
for (k in 1:N) {
w_new <- W[k]+ h*dy(T[k], W[k])
T <- c(T, T[k]+h)
W <- c(W, w_new)
}
resultados <- list("T"=T, "W"=W)
return(resultados)
}
sol_aprox <- my_euler(dy, 0, 1, 0.5, 4)
my_colors=c("y(x)"="firebrick", "w(x)"="dodgerblue")
graf<-ggplot()+
geom_function(aes(color="y(x)"),fun=y_sol, xlim=c(0,1))+
geom_line(aes(sol_aprox$T,sol_aprox$W, color="w(x)"))+
scale_color_manual(values=my_colors)+
labs(x="x", y="y(x)", color=" ")+
theme_bw()
ggplotly(graf)
dy <- function(x,y){
4*x
}
y_sol <- function(x){
2*x^2+4
}
my_euler <- function(dy, a,b, N, y0){
h <- (b-a)/N
T <- a
W <- y0
for (k in 1:N) {
w_new <- W[k]+ h*dy(T[k], W[k])
T <- c(T, T[k]+h)
W <- c(W, w_new)
}
resultados <- list("T"=T, "W"=W)
return(resultados)
}
sol_aprox <- my_euler(dy, 0, 1, 2, 4)
Y_aprox_1 <- sol_aprox$W[length(sol_aprox$W)]
# Calcular B_sol(1) (solución exacta)
Y_exact <- y_sol(1)
my_colors=c("y(x)"="firebrick", "w(x)"="dodgerblue")
graf<-ggplot()+
geom_function(aes(color="y(x)"),fun=y_sol, xlim=c(0,1))+
geom_line(aes(sol_aprox$T,sol_aprox$W, color="w(x)"))+
scale_color_manual(values=my_colors)+
labs(x="x", y="y(x)", color=" ")+
theme_bw()
ggplotly(graf)
sol_aprox
dy <- function(x,y){
4*x
}
y_sol <- function(x){
2*x^2+4
}
my_euler <- function(dy, a,b, N, y0){
h <- (b-a)/N
T <- a
W <- y0
for (k in 1:N) {
w_new <- W[k]+ h*dy(T[k], W[k])
T <- c(T, T[k]+h)
W <- c(W, w_new)
}
resultados <- list("T"=T, "W"=W)
return(resultados)
}
sol_aprox <- my_euler(dy, 0, 1, 4, 4)
Y_aprox_1 <- sol_aprox$W[length(sol_aprox$W)]
# Calcular B_sol(1) (solución exacta)
Y_exact <- y_sol(1)
my_colors=c("y(x)"="firebrick", "w(x)"="dodgerblue")
graf<-ggplot()+
geom_function(aes(color="y(x)"),fun=y_sol, xlim=c(0,1))+
geom_line(aes(sol_aprox$T,sol_aprox$W, color="w(x)"))+
scale_color_manual(values=my_colors)+
labs(x="x", y="y(x)", color=" ")+
theme_bw()
ggplotly(graf)
Y_exact
dy <- function(x,y){
4*x
}
y_sol <- function(x){
2*x^2+4
}
my_euler <- function(dy, a,b, N, y0){
h <- (b-a)/N
T <- a
W <- y0
for (k in 1:N) {
w_new <- W[k]+ h*dy(T[k], W[k])
T <- c(T, T[k]+h)
W <- c(W, w_new)
}
resultados <- list("T"=T, "W"=W)
return(resultados)
}
sol_aprox <- my_euler(dy, 0, 1, 100, 4)
Y_aprox_1 <- sol_aprox$W[length(sol_aprox$W)]
# Calcular B_sol(1) (solución exacta)
Y_exact <- y_sol(1)
my_colors=c("y(x)"="firebrick", "w(x)"="dodgerblue")
graf<-ggplot()+
geom_function(aes(color="y(x)"),fun=y_sol, xlim=c(0,1))+
geom_line(aes(sol_aprox$T,sol_aprox$W, color="w(x)"))+
scale_color_manual(values=my_colors)+
labs(x="x", y="y(x)", color=" ")+
theme_bw()
ggplotly(graf)
sol_aprox
dy <- function(x,y){
4*x
}
y_sol <- function(x){
2*x^2+4
}
my_euler <- function(dy, a,b, N, y0){
h <- (b-a)/N
T <- a
W <- y0
for (k in 1:N) {
w_new <- W[k]+ h*dy(T[k], W[k])
T <- c(T, T[k]+h)
W <- c(W, w_new)
}
resultados <- list("T"=T, "W"=W)
return(resultados)
}
sol_aprox <- my_euler(dy, 0, 1, 1000, 4)
Y_aprox_1 <- sol_aprox$W[length(sol_aprox$W)]
# Calcular B_sol(1) (solución exacta)
Y_exact <- y_sol(1)
my_colors=c("y(x)"="firebrick", "w(x)"="dodgerblue")
graf<-ggplot()+
geom_function(aes(color="y(x)"),fun=y_sol, xlim=c(0,1))+
geom_line(aes(sol_aprox$T,sol_aprox$W, color="w(x)"))+
scale_color_manual(values=my_colors)+
labs(x="x", y="y(x)", color=" ")+
theme_bw()
ggplotly(graf)
0
sol_aprox
dy <- function(x,y){
4*x
}
y_sol <- function(x){
2*x^2+4
}
my_euler <- function(dy, a,b, N, y0){
h <- (b-a)/N
T <- a
W <- y0
for (k in 1:N) {
w_new <- W[k]+ h*dy(T[k], W[k])
T <- c(T, T[k]+h)
W <- c(W, w_new)
}
resultados <- list("T"=T, "W"=W)
return(resultados)
}
sol_aprox <- my_euler(dy, 0, 2, 1000, 4)
Y_aprox_1 <- sol_aprox$W[length(sol_aprox$W)]
# Calcular B_sol(1) (solución exacta)
Y_exact <- y_sol(1)
my_colors=c("y(x)"="firebrick", "w(x)"="dodgerblue")
graf<-ggplot()+
geom_function(aes(color="y(x)"),fun=y_sol, xlim=c(0,1))+
geom_line(aes(sol_aprox$T,sol_aprox$W, color="w(x)"))+
scale_color_manual(values=my_colors)+
labs(x="x", y="y(x)", color=" ")+
theme_bw()
ggplotly(graf)
dy <- function(t,y){
-20*y+2
}
y_sol <- function(t){
1/10-exp(-20*t)/10
}
my_euler <- function(dy, a,b, N, y0){
h <- (b-a)/N
T <- a
W <- y0
for (k in 1:N) {
w_new <- W[k]+ h*dy(T[k], W[k])
T <- c(T, T[k]+h)
W <- c(W, w_new)
}
resultados <- list("T"=T, "W"=W)
return(resultados)
}
sol_aprox <- my_euler(dy, 0, 15, 100, 0)
my_colors=c("y(t)"="firebrick", "w(t)"="dodgerblue")
graf<-ggplot()+
geom_function(aes(color="y(t)"),fun=y_sol, xlim=c(0,15))+
geom_line(aes(sol_aprox$T,sol_aprox$W, color="w(t)"))+
scale_color_manual(values=my_colors)+
labs(x="t", y="y(t)", color=" ")+
theme_bw()
ggplotly(graf)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(tidyverse)
library(pracma)
library(plotly)
library(lubridate)
library(polynom)
library(RColorBrewer)
library(plotly)
library(MASS)
library(car)
library(rgl)
knitr::knit_hooks$set(webgl = hook_webgl)
f <- function(t, u){
p <- par_prob
as.matrix(c(p[1]*(u[2]-u[1]),
u[1]*(p[2]-u[3])-u[2],
u[1]*u[2]-p[3]*u[3]))
}
u0 <- as.matrix(c(1, 0, 0))
par_prob <- c(10.0,28.0,8/3)
aprox_sist <- ode45(f, 0, 100,u0)
aprox_sist_tab <- as.data.frame(aprox_sist$y)
plot_ly(aprox_sist_tab, x = ~V1, y = ~V2, z = ~V3, type = 'scatter3d', mode = 'lines')
# Definir función solve_lorenz
solve_lorenz <- function(state, t, sigma, rho, beta) {
x <- state[1]
y <- state[2]
z <- state[3]
dx <- sigma * (y - x)
dy <- x * (rho - z) - y
dz <- x * y - beta * z
return(c(dx, dy, dz))
}
# Ejemplo resolviendo para ciertas condiciones iniciales
initial_state <- c(1, 1, 1)
time <- 1
sigma <- 10
rho <- 28
beta <- 8/3
solution <- solve_lorenz(initial_state, time, sigma, rho, beta)
print(solution)
# Definir condiciones iniciales
initial_state <- c(1, 1, 1)
# Definir parámetros
sigma <- 10
rho <- 28
beta <- 8/3
# Definir vector de tiempo
t <- seq(0, 100, length.out = 3000)
# Imprimir el tamaño del vector de tiempo
print(paste("Valores equidistantes de t:", length(t)))
library(deSolve)
library(plotly)
# Definir función solve_lorenz
solve_lorenz <- function(t, state, parameters) {
with(as.list(c(state, parameters)), {
dx <- sigma * (y - x)
dy <- x * (rho - z) - y
dz <- x * y - beta * z
return(list(c(dx, dy, dz)))
})
}
# Definir condiciones iniciales y parámetros
initial_state <- c(x = 1, y = 1, z = 1)
parameters <- c(sigma = 10, rho = 28, beta = 8/3)
# Vector de tiempo
t <- seq(0, 100, length.out = 3000)
# Resolver ecuaciones diferenciales usando ode
states <- ode(y = initial_state, times = t, func = solve_lorenz, parms = parameters)
# Extraer resultados
xs <- states[, "x"]
ys <- states[, "y"]
zs <- states[, "z"]
# Crear gráfico 3D
plot_ly(data = data.frame(xs = xs, ys = ys, zs = zs)) %>%
add_trace(x = ~xs, y = ~ys, z = ~zs, type = 'scatter3d', mode = 'lines') %>%
layout(title = "Atractor de Lorenz con ode")
dy <- function(t, u){as.matrix(c(u[2], (3/2)*u[1]-(5/2)*u[2]))}
y0 <- as.matrix(c(1,11))
sol_aprox <- ode45(dy, 0, 3, y0, hmax=0.01)
y_exacta <- function(t){4*exp(t/2)-3*exp(-3*t)}
sol_rg <- ode45(dy, 0, 3, y0, hmax=0.01)
sol_sis <- ggplot()+
geom_line(aes(sol_aprox$t, y_exacta(sol_aprox$t)), color="#ED7222", size=1.5)+
geom_line(aes(sol_aprox$t, sol_aprox$y[ ,1]), color="#9FBC5A")+
labs(x="t", y="y(t)")+
theme_bw()
ggplotly(sol_sis)
dy <- function(t,y){as.matrix(-7*y[1]+3*y[2], -2*y[1]-2*y[2])}
y0 <- as.matrix(c(-1, 0))
sol_rg <- ode45(dy, 0, 10, y0, hmax=0.01)
sol_sis <- ggplot()+
geom_line(aes(sol_rg$t, sol_rg$y[ ,1]), color="#4BBAC3")+
geom_line(aes(sol_rg$t, sol_rg$y[ ,2]), color="#CC243C")+
theme_bw()
ggplotly(sol_sis)
y1 <- function(t){2*exp(-4*t)-3*exp(-5*t)}
y2 <- function(t){2*exp(-4*t)-2*exp(-5*t)}
sol_graf <- ggplot()+
geom_line(aes(t, y1(t)), color="#5AA354")+
geom_line(aes(t, y2(t)), color="#E84746")+
theme_bw()
ggplotly(sol_graf)
