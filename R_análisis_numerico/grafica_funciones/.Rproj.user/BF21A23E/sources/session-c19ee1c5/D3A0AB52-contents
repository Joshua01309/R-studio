---
title: "Gráficas de funciones."
subtitle: "Análisis Numérico."
output: 
  prettydoc::html_pretty:
    toc: true
    theme: architect
header-includes:
   - \usepackage{amsmath}
---





<style>
body {
text-align: justify}
</style>



```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(tidyverse)
library(plotly)
library(ggh4x)
#library(pracma)
#library(polynom)
#library(matlib)
```




Realiza la gráfica de las siguientes funciones en el intervalo adecuado.

a) $f(x)=e^x-3x^2$.



```{r}
f_a <- function(x){exp(x)-3*x^2}

x_a <- seq(0, 5, by=0.0001)
y_a <- f_a(x_a)

#graf_a <- 
  ggplot()+
  geom_vline(xintercept = 0, linetype="dashed")+ #eje x
  geom_hline(yintercept = 0, linetype="dashed")+ #eje y
  geom_line(aes(x=x_a, y=y_a), color="red", linewidth=1)+
  #coord_fixed(ratio = 1)+ # misma escala en los ejes
  labs(x="x", y="f(x)", title="Primera gráfica")+
  theme_bw()


#ggplotly(graf_a)
```


Otra opción

```{r}
graf_a <- ggplot()+
  #geom_vline(xintercept = 0, linetype="dashed")+ #eje x
  #geom_hline(yintercept = 0, linetype="dashed")+ #eje y
  geom_function(fun=f_a, color="red", linewidth=1)+
  #coord_fixed(ratio = 1)+ # misma escala en los ejes
  xlim(-0.5, 5)+
  labs(x="x", y="f(x)", title="Primera gráfica")+
  theme_bw()


ggplotly(graf_a)
```





b)$f(x)=\frac{2x^2-8}{x+2}$

c)$f(x)=\frac{x+1}{x+2}$

d) $f(x)=3x+1$

e) $f(x)=x^4-x^3+x^2-x+1$. 

```{r}
f_e <- function(x){x^4-x^3+x^2-x+1}

  
  
graf_e <- ggplot()+
  #geom_vline(xintercept = 0, linetype="dashed")+ #eje x
  #geom_hline(yintercept = 0, linetype="dashed")+ #eje y
  geom_function(fun=f_e, color="red", linewidth=1)+
  stat_function(fun=f_e, geom="point", color="blue", n=10)+
  #coord_fixed(ratio = 1)+ # misma escala en los ejes
  xlim(-2, 2)+
  labs(x="x", y="f(x)", title=" gráfica inciso e")+
  theme_bw()


ggplotly(graf_e)
```




f) $f(x)=x\,cos\,x-3x$.  

g) $f(x)=e^{2x}$.

h) $f(x)=log(e^x+2)$.  

i) $f(x) = cos \,x+sen\,x$.

```{r}
f_i <- function(x){cos(x)+sin(x)}

  
  
graf_i <- ggplot()+
  #geom_vline(xintercept = 0, linetype="dashed")+ #eje x
  #geom_hline(yintercept = 0, linetype="dashed")+ #eje y
  geom_function(fun=f_i, color="red", linewidth=1)+
  stat_function(fun=f_i, geom="point", color="blue", n=10)+
  #coord_fixed(ratio = 1)+ # misma escala en los ejes
  xlim(-0.5, 2*pi)+
  labs(x="x", y="f(x)", title=" gráfica inciso i")+
  theme_bw()


ggplotly(graf_i)
```

```{r}
metodo_biseccion(f_i, a=2, b=4, tol=1e-15)
```


j) $f(x)=sen(e^x-2)$.



# Función para el método de bisección



```{r}
metodo_biseccion <- function(f_x, a,b,tol=1e-5, N=100){
  cond <-  1
  it <- 0
  A <- a
  B <- b
  p <- 0
  while(cond==1){
    it <- it+1
    if(it<=N){#if 1
      p[it] <- A[it]+(B[it]-A[it])/2
      tol_it <- (B[it]-A[it])/2
      if( f_x(p[it])==0 | tol_it<tol){#if 2
        resultados <- list(aprox=p, precision=tol_it, iteraciones=it)
        return(resultados)
        cond <- 0
      }# end if 2
      else{ #else 2
        if(f_x(A[it])*f_x(p[it])<0){# if 3
          A[it+1] <- A[it]
          B[it+1] <- p[it]
        } # end if 3
        else{# else 3
          A[it+1] <- p[it]
          B[it+1] <- B[it]
        }# end else 3
      } #end else 2
    }#end if 1
    else{ # else 1
      print("Se alcanzó el máximo de iteraciones")
      cond <- 0
    } # end else 1
  }# While
}#Función
```
```{r}
metodo_biseccion(f_a, a=3, b=4, tol=1e-09, N=1000 )
```



