---
title: "Tarea 2. Interpolación polinomial."
author: " Murillo Alba Josue Ivan 
Análisis Numérico."
date: "Febrero del 2024"
output: 
  prettydoc::html_pretty:
    toc: true
    theme: architect
header-includes:
   - \usepackage{amsmath}
---





<style>
body {
text-align: justify}
</style>



```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(tidyverse)
library(pracma)
library(plotly)
library(polynom)
```


**Definición.** Supongamos que $p^*$ es una aproximación de $p$. El **error real** es $p-p^*$, el **error absoluto** es $|p-p^*|$ y el error relativo es

\begin{equation}
\frac{|p-p^*|}{|p|},
\end{equation}

siempre y cuando $p\neq 0$.

# Ejercicio 1.

En cada inciso considera la función de valores reales, usa los polinomios interpolantes de Lagrange de grado a lo más tres con los puntos dados para aproximar el valor de la función solicitado.  En cada caso calcula el error real, el absoluto y el relativo.

a) $f(x)=e^{2x}$.  Puntos: $x_0=0, x_1=0.25, x_2=0.5, x_3=0.75$.  Aproximar $f(0.43)$.

```{r}
f <- function(x) { exp(2*x) }

x <- c(0, 0.25, 0.5, 0.75)
x0 <- x[1]
x1 <- x[2]
x2 <- x[3]
x3 <- x[4]
y <- f(x)
y0 <- y[1]
y1 <- y[2]
y2 <- y[3]
y3 <- y[4]

L0 <- function(x) { ((x-x1)*(x-x2)*(x-x3))/((x0-x1)*(x0-x2)*(x0-x3)) }
L1 <- function(x) { ((x-x0)*(x-x2)*(x-x3))/((x1-x0)*(x1-x2)*(x1-x3)) }
L2 <- function(x) { ((x-x0)*(x-x1)*(x-x3))/((x2-x0)*(x2-x1)*(x2-x3)) }
L3 <- function(x) { ((x-x0)*(x-x1)*(x-x2))/((x3-x0)*(x3-x1)*(x3-x2)) }

pol_lagrange <- function(x) {
  L0(x)*f(x0) + L1(x)*f(x1) + L2(x)*f(x2) + L3(x)*f(x3)
}

my_colors <- c("f(x)"="#2A5783", "L0(x)"="#41B7C4", "L1(x)"="#7ECDBB",
               "L2(x)"="#B6E4B3", "L3(x)"="#E9F7B9", "P(x)"="#297A3F")

graf_pol <- ggplot() +
  geom_function(aes(color="f(x)"), fun=f, linewidth=1.5) +
  geom_function(aes(color="L0(x)"), fun=L0, linewidth=0.75) +
  geom_function(aes(color="L1(x)"), fun=L1, linewidth=0.75) +
  geom_function(aes(color="L2(x)"), fun=L2, linewidth=0.75) +
  geom_function(aes(color="L3(x)"), fun=L3, linewidth=0.75) +
  geom_function(aes(color="P(x)"), fun=pol_lagrange, linewidth=0.5) +
  geom_function(fun=pol_lagrange, color="#FFCC9E") +
  geom_point(aes(x, y), size=2.1, color="#F2862C") +
  geom_point(aes(x=0.43, y=f(0.43)), color="#71B966", size=2.3) + # Corrección aquí
  scale_color_manual(values=my_colors) +
  labs(x="x", y="y", color="Función", title="Gráfica 1a") +
  scale_x_continuous(breaks=x, limits=c(-0.5, 0.8)) +
  theme_bw()

ggplotly(graf_pol)

```

valor de la función $f(0.43)$

```{r}
x_p <-0.43

f(0.43)
```

Aproximación por medio del polinomio
```{r}
pol_lagrange
```
Error real
```{r}
f(x_p)-pol_lagrange(x_p)
```
Error absoluto
```{r}
abs(f(x_p)-pol_lagrange(x_p))
```
Error relativo
```{r}
abs(f(x_p)-pol_lagrange(x_p))/abs(f(x_p))
```



b) $f(x)=x\,cos\,x-3x$.  Puntos: $x_0=0.1, x_1=0.2, x_2=0.3, x_3=0.4$.  Aproximar $f(0.18)$.

```{r}
f <- function(x) {x*cos(x)-3*x}

x <- c(0.1, 0.2, 0.3, 0.4)
x0 <- x[1]
x1 <- x[2]
x2 <- x[3]
x3 <- x[4]
y <- f(x)
y0 <- y[1]
y1 <- y[2]
y2 <- y[3]
y3 <- y[4]

L0 <- function(x) { ((x-x1)*(x-x2)*(x-x3))/((x0-x1)*(x0-x2)*(x0-x3)) }
L1 <- function(x) { ((x-x0)*(x-x2)*(x-x3))/((x1-x0)*(x1-x2)*(x1-x3)) }
L2 <- function(x) { ((x-x0)*(x-x1)*(x-x3))/((x2-x0)*(x2-x1)*(x2-x3)) }
L3 <- function(x) { ((x-x0)*(x-x1)*(x-x2))/((x3-x0)*(x3-x1)*(x3-x2)) }

pol_lagrange <- function(x) {
  L0(x)*f(x0) + L1(x)*f(x1) + L2(x)*f(x2) + L3(x)*f(x3)
}

my_colors <- c("f(x)"="#2A5783", "L0(x)"="#41B7C4", "L1(x)"="#7ECDBB",
               "L2(x)"="#B6E4B3", "L3(x)"="#E9F7B9", "P(x)"="#297A3F")

graf_pol <- ggplot() +
  geom_function(aes(color="f(x)"), fun=f, linewidth=1.5) +
  geom_function(aes(color="L0(x)"), fun=L0, linewidth=0.75) +
  geom_function(aes(color="L1(x)"), fun=L1, linewidth=0.75) +
  geom_function(aes(color="L2(x)"), fun=L2, linewidth=0.75) +
  geom_function(aes(color="L3(x)"), fun=L3, linewidth=0.75) +
  geom_function(aes(color="P(x)"), fun=pol_lagrange, linewidth=0.5) +
  geom_function(fun=pol_lagrange, color="#FFCC9E") +
  geom_point(aes(x, y), size=2.1, color="#F2862C") +
  geom_point(aes(x=0.18, y=f(0.18)), color="#71B966", size=2.3) + # Corrección aquí
  scale_color_manual(values=my_colors) +
  labs(x="x", y="y", color="Función", title="Gráfica b") +
  scale_x_continuous(breaks=x, limits=c(-0.5, 0.8)) +
  theme_bw()

ggplotly(graf_pol)

```

valor de la función $f(0.18)$

```{r}
x_p <-0.18

f(0.18)
```

Aproximación por medio del polinomio
```{r}
pol_lagrange
```
Error real
```{r}
f(x_p)-pol_lagrange(x_p)
```
Error absoluto
```{r}
abs(f(x_p)-pol_lagrange(x_p))
```
Error relativo
```{r}
abs(f(x_p)-pol_lagrange(x_p))/abs(f(x_p))
```



c) $f(x)=log(e^x+2)$.  Puntos: $x_0=-1, x_1=-0.5, x_2=0, x_3=0.5$.  Aproximar $f(0.25)$.

```{r}
f <- function(x) {log(exp(x)+2)}

x <- c(-1, -0.5, 0, 0.5)
x0 <- x[1]
x1 <- x[2]
x2 <- x[3]
x3 <- x[4]
y <- f(x)
y0 <- y[1]
y1 <- y[2]
y2 <- y[3]
y3 <- y[4]

L0 <- function(x) { ((x-x1)*(x-x2)*(x-x3))/((x0-x1)*(x0-x2)*(x0-x3)) }
L1 <- function(x) { ((x-x0)*(x-x2)*(x-x3))/((x1-x0)*(x1-x2)*(x1-x3)) }
L2 <- function(x) { ((x-x0)*(x-x1)*(x-x3))/((x2-x0)*(x2-x1)*(x2-x3)) }
L3 <- function(x) { ((x-x0)*(x-x1)*(x-x2))/((x3-x0)*(x3-x1)*(x3-x2)) }

pol_lagrange <- function(x) {
  L0(x)*f(x0) + L1(x)*f(x1) + L2(x)*f(x2) + L3(x)*f(x3)
}

my_colors <- c("f(x)"="#2A5783", "L0(x)"="#41B7C4", "L1(x)"="#7ECDBB",
               "L2(x)"="#B6E4B3", "L3(x)"="#E9F7B9", "P(x)"="#297A3F")

graf_pol <- ggplot() +
  geom_function(aes(color="f(x)"), fun=f, linewidth=1.5) +
  geom_function(aes(color="L0(x)"), fun=L0, linewidth=0.75) +
  geom_function(aes(color="L1(x)"), fun=L1, linewidth=0.75) +
  geom_function(aes(color="L2(x)"), fun=L2, linewidth=0.75) +
  geom_function(aes(color="L3(x)"), fun=L3, linewidth=0.75) +
  geom_function(aes(color="P(x)"), fun=pol_lagrange, linewidth=0.5) +
  geom_function(fun=pol_lagrange, color="#FFCC9E") +
  geom_point(aes(x, y), size=2.1, color="#F2862C") +
  geom_point(aes(x=0.25, y=f(0.25)), color="#71B966", size=2.3) + # Corrección aquí
  scale_color_manual(values=my_colors) +
  labs(x="x", y="y", color="Función", title="Gráfica c") +
  scale_x_continuous(breaks=x, limits=c(-2, 1)) +
  theme_bw()

ggplotly(graf_pol)
```

valor de la función $f(0.25)$
```{r}
x_p <-0.25

f(0.25)
```

Aproximación por medio del polinomio
```{r}
pol_lagrange
```
Error real
```{r}
f(x_p)-pol_lagrange(x_p)
```
Error absoluto
```{r}
abs(f(x_p)-pol_lagrange(x_p))
```
Error relativo
```{r}
abs(f(x_p)-pol_lagrange(x_p))/abs(f(x_p))
```




# Ejercicio 2

Se sospecha que las elevadas concentraciones de tanina en las hojas de los robles maduros inhiben el crecimiento de las larvas de la polilla invernal (*Operophtera bromata L. Geometridae*) que tanto dañan a los árboles en algunos años.  La tabla anexa contiene el peso promedio de dos muestras de larva, tomadas en los primeros 28 días después de nacimiento.  La primera muestra se crió en hojas de robles jóvenes, mientras que la segunda lo hizo en hojas maduras del mismo árbol.

a) Usa la interpolación polinomial para aproximar la curva del peso promedio de las muestras.

\begin{equation}
\begin{array}{l|c|c|c|c|c|c|r} 
\text{Día} & 0 & 6 & 10 & 13 & 17 & 20 & 28 \\
\hline \text{Peso promedio muestra 1 (mg)} & 6.67 & 17.33 & 42.67 & 37.33 & 30.10 & 29.31 & 28.74 \\
\text{Peso promedio muestra 2 (mg)} & 6.67 & 16.11 & 18.89 & 15.00 & 10.56 & 9.44 & 8.89
\end{array}
\end{equation}


```{r}
library(tibble)
library(ggplot2)

Muestras <- tibble(Dia = c(0, 6, 10, 13, 17, 20, 28),
                   Muestra_1 = c(6.67, 17.33, 42.67, 37.33, 30.10, 29.31, 28.74),
                   Muestra_2 = c(6.67, 16.11, 18.89, 15.00, 10.56, 9.44, 8.89))

# Ajuste de polinomio utilizando el paquete pracma
poli_m1 <- pracma::polyfit(Muestras$Dia, Muestras$Muestra_1, n = 6)
polif_m1 <- function(x) pracma::polyval(poli_m1, x)

# Ajuste de polinomio utilizando el paquete polynom
poli_m2 <- stats::lm(Muestra_2 ~ poly(Dia, 6), data = Muestras)
polif_m2 <- function(x) predict(poli_m2, newdata = data.frame(Dia = x))

my_colors <- c("Muestra 1" = "#6696BF", "Muestra 2" = "#CB2C3E")

graf_pol<-ggplot() +
  geom_line(aes(x = Muestras$Dia, y = Muestras$Muestra_1, color = "Muestra 1"), 
            stat = "function", fun = polif_m1, size = 1.2) +
  geom_line(aes(x = Muestras$Dia, y = Muestras$Muestra_2, color = "Muestra 2"), 
            stat = "function", fun = polif_m2, size = 1.2) +
  geom_point(aes(x = Dia, y = Muestra_2), data = Muestras, color = "#FFE93F") +
  scale_color_manual(values = my_colors) +
  labs(x = "Dia", y = "Masa promedio (mg)", color = "Muestra", 
       title = "Larvas de dos muestras", subtitle = "Masa") +
  theme_bw()

ggplotly(graf_pol)
```

b) Para calcular un peso promedio máximo aproximado de cada muestra, determina el máximo del polinomio interpolante.



# Ejercicio 3

Construye los polinomios interpolantes de grados $n=1,2,3,4$ para las siguientes funciones en el intervalo dado. 

a) $f(x) = e^{2x}\, cos 3x$, $[0,2]$. 

```{r}
f <- function(x) { exp(2*x) }

x <- c(0, 0.5, 1, 1.5, 2)
x0 <- x[1]
x1 <- x[2]
x2 <- x[3]
x3 <- x[4]
x4 <- x[5]
y <- f(x)
y0 <- y[1]
y1 <- y[2]
y2 <- y[3]
y3 <- y[4]
y4 <- y[5]

L0 <- function(x) { ((x-x1)*(x-x2)*(x-x3)*(x-x4))/((x0-x1)*(x0-x2)*(x0-x3)*(x0-x4)) }
L1 <- function(x) { ((x-x0)*(x-x2)*(x-x3)*(x-x4))/((x1-x0)*(x1-x2)*(x1-x3)*(x1-x4)) }
L2 <- function(x) { ((x-x0)*(x-x1)*(x-x3)*(x-x4))/((x2-x0)*(x2-x1)*(x2-x3)*(x2-x4)) }
L3 <- function(x) { ((x-x0)*(x-x1)*(x-x2)*(x-x4))/((x3-x0)*(x3-x1)*(x3-x2)*(x3-x2)) }
L4 <- function(x) { ((x-x0)*(x-x1)*(x-x2)*(x-x3))/((x4-x0)*(x4-x1)*(x4-x2)*(x4-x3)) }

pol_lagrange <- function(x) {
  L0(x)*f(x0) + L1(x)*f(x1) + L2(x)*f(x2) + L3(x)*f(x3) + L4(x)*f(x4)
}

my_colors <- c("f(x)"="#2A5783", "L0(x)"="#41B7C4", "L1(x)"="#7ECDBB",
               "L2(x)"="#B6E4B3", "L3(x)"="#E9F7B9", "L4(x)"="#D72E3E", "P(x)"="#297A3F")

graf_pol <- ggplot() +
  geom_function(aes(color="f(x)"), fun=f, linewidth=1.5) +
  geom_function(aes(color="L0(x)"), fun=L0, linewidth=0.75) +
  geom_function(aes(color="L1(x)"), fun=L1, linewidth=0.75) +
  geom_function(aes(color="L2(x)"), fun=L2, linewidth=0.75) +
  geom_function(aes(color="L3(x)"), fun=L3, linewidth=0.75) +
  geom_function(aes(color="L4(x)"), fun=L4, linewidth=0.75) +
  geom_function(aes(color="P(x)"), fun=pol_lagrange, linewidth=0.5) +
  geom_function(fun=pol_lagrange, color="#FFCC9E") +
  geom_point(aes(x, y), size=2.1, color="#F2862C") +
  geom_point(aes(x=0.43, y=f(0.43)), color="#71B966", size=2.3) + # Corrección aquí
  scale_color_manual(values=my_colors) +
  labs(x="x", y="y", color="Función", title="Gráfica 1a") +
  scale_x_continuous(breaks=x, limits=c(0, 2)) +
  theme_bw()

ggplotly(graf_pol)
```


b) $f(x) = sen(log\,x)$, $[1,3]$.

```{r}
f <- function(x) {sin(log(x))}

x <- c(1, 1.5, 2, 2.5, 3)
x0 <- x[1]
x1 <- x[2]
x2 <- x[3]
x3 <- x[4]
x4 <- x[5]
y <- f(x)
y0 <- y[1]
y1 <- y[2]
y2 <- y[3]
y3 <- y[4]
y4 <- y[5]

L0 <- function(x) { ((x-x1)*(x-x2)*(x-x3)*(x-x4))/((x0-x1)*(x0-x2)*(x0-x3)*(x0-x4)) }
L1 <- function(x) { ((x-x0)*(x-x2)*(x-x3)*(x-x4))/((x1-x0)*(x1-x2)*(x1-x3)*(x1-x4)) }
L2 <- function(x) { ((x-x0)*(x-x1)*(x-x3)*(x-x4))/((x2-x0)*(x2-x1)*(x2-x3)*(x2-x4)) }
L3 <- function(x) { ((x-x0)*(x-x1)*(x-x2)*(x-x4))/((x3-x0)*(x3-x1)*(x3-x2)*(x3-x2)) }
L4 <- function(x) { ((x-x0)*(x-x1)*(x-x2)*(x-x3))/((x4-x0)*(x4-x1)*(x4-x2)*(x4-x3)) }

pol_lagrange <- function(x) {
  L0(x)*f(x0) + L1(x)*f(x1) + L2(x)*f(x2) + L3(x)*f(x3) + L4(x)*f(x4)
}

my_colors <- c("f(x)"="#2A5783", "L0(x)"="#41B7C4", "L1(x)"="#7ECDBB",
               "L2(x)"="#B6E4B3", "L3(x)"="#E9F7B9", "L4(x)"="#D72E3E", "P(x)"="#297A3F")

graf_pol <- ggplot() +
  geom_function(aes(color="f(x)"), fun=f, linewidth=1.5) +
  geom_function(aes(color="L0(x)"), fun=L0, linewidth=0.75) +
  geom_function(aes(color="L1(x)"), fun=L1, linewidth=0.75) +
  geom_function(aes(color="L2(x)"), fun=L2, linewidth=0.75) +
  geom_function(aes(color="L3(x)"), fun=L3, linewidth=0.75) +
  geom_function(aes(color="L4(x)"), fun=L4, linewidth=0.75) +
  geom_function(aes(color="P(x)"), fun=pol_lagrange, linewidth=0.5) +
  geom_function(fun=pol_lagrange, color="#FFCC9E") +
  geom_point(aes(x, y), size=2.1, color="#F2862C") +
  geom_point(aes(x=0.43, y=f(0.43)), color="#71B966", size=2.3) + # Corrección aquí
  scale_color_manual(values=my_colors) +
  labs(x="x", y="y", color="Función", title="Gráfica 1a") +
  scale_x_continuous(breaks=x, limits=c(1, 3)) +
  theme_bw()

ggplotly(graf_pol)
```


c) $f(x) = e^{x}+e^{-x}$, $[0,2]$. 

```{r}
f <- function(x) { exp(x)+exp(-x) }

x <- c(0, 0.5, 1, 1.5, 2)
x0 <- x[1]
x1 <- x[2]
x2 <- x[3]
x3 <- x[4]
x4 <- x[5]
y <- f(x)
y0 <- y[1]
y1 <- y[2]
y2 <- y[3]
y3 <- y[4]
y4 <- y[5]

L0 <- function(x) { ((x-x1)*(x-x2)*(x-x3)*(x-x4))/((x0-x1)*(x0-x2)*(x0-x3)*(x0-x4)) }
L1 <- function(x) { ((x-x0)*(x-x2)*(x-x3)*(x-x4))/((x1-x0)*(x1-x2)*(x1-x3)*(x1-x4)) }
L2 <- function(x) { ((x-x0)*(x-x1)*(x-x3)*(x-x4))/((x2-x0)*(x2-x1)*(x2-x3)*(x2-x4)) }
L3 <- function(x) { ((x-x0)*(x-x1)*(x-x2)*(x-x4))/((x3-x0)*(x3-x1)*(x3-x2)*(x3-x2)) }
L4 <- function(x) { ((x-x0)*(x-x1)*(x-x2)*(x-x3))/((x4-x0)*(x4-x1)*(x4-x2)*(x4-x3)) }

pol_lagrange <- function(x) {
  L0(x)*f(x0) + L1(x)*f(x1) + L2(x)*f(x2) + L3(x)*f(x3) + L4(x)*f(x4)
}

my_colors <- c("f(x)"="#2A5783", "L0(x)"="#41B7C4", "L1(x)"="#7ECDBB",
               "L2(x)"="#B6E4B3", "L3(x)"="#E9F7B9", "L4(x)"="#D72E3E", "P(x)"="#297A3F")

graf_pol <- ggplot() +
  geom_function(aes(color="f(x)"), fun=f, linewidth=1.5) +
  geom_function(aes(color="L0(x)"), fun=L0, linewidth=0.75) +
  geom_function(aes(color="L1(x)"), fun=L1, linewidth=0.75) +
  geom_function(aes(color="L2(x)"), fun=L2, linewidth=0.75) +
  geom_function(aes(color="L3(x)"), fun=L3, linewidth=0.75) +
  geom_function(aes(color="L4(x)"), fun=L4, linewidth=0.75) +
  geom_function(aes(color="P(x)"), fun=pol_lagrange, linewidth=0.5) +
  geom_function(fun=pol_lagrange, color="#FFCC9E") +
  geom_point(aes(x, y), size=2.1, color="#F2862C") +
  geom_point(aes(x=0.43, y=f(0.43)), color="#71B966", size=2.3) + # Corrección aquí
  scale_color_manual(values=my_colors) +
  labs(x="x", y="y", color="Función", title="Gráfica 1a") +
  scale_x_continuous(breaks=x, limits=c(0, 2)) +
  theme_bw()

ggplotly(graf_pol)
```


d) $f(x) = cos \,x+sen\,x$, $[0,2\pi]$.

```{r}
f <- function(x) { cos(x)+sin(x) }

x <- c(0, pi/2, pi, 3*pi/2, 2*pi)
x0 <- x[1]
x1 <- x[2]
x2 <- x[3]
x3 <- x[4]
x4 <- x[5]
y <- f(x)
y0 <- y[1]
y1 <- y[2]
y2 <- y[3]
y3 <- y[4]
y4 <- y[5]

L0 <- function(x) { ((x-x1)*(x-x2)*(x-x3)*(x-x4))/((x0-x1)*(x0-x2)*(x0-x3)*(x0-x4)) }
L1 <- function(x) { ((x-x0)*(x-x2)*(x-x3)*(x-x4))/((x1-x0)*(x1-x2)*(x1-x3)*(x1-x4)) }
L2 <- function(x) { ((x-x0)*(x-x1)*(x-x3)*(x-x4))/((x2-x0)*(x2-x1)*(x2-x3)*(x2-x4)) }
L3 <- function(x) { ((x-x0)*(x-x1)*(x-x2)*(x-x4))/((x3-x0)*(x3-x1)*(x3-x2)*(x3-x2)) }
L4 <- function(x) { ((x-x0)*(x-x1)*(x-x2)*(x-x3))/((x4-x0)*(x4-x1)*(x4-x2)*(x4-x3)) }

pol_lagrange <- function(x) {
  L0(x)*f(x0) + L1(x)*f(x1) + L2(x)*f(x2) + L3(x)*f(x3) + L4(x)*f(x4)
}

my_colors <- c("f(x)"="#2A5783", "L0(x)"="#41B7C4", "L1(x)"="#7ECDBB",
               "L2(x)"="#B6E4B3", "L3(x)"="#E9F7B9", "L4(x)"="#D72E3E", "P(x)"="#297A3F")

graf_pol <- ggplot() +
  geom_function(aes(color="f(x)"), fun=f, linewidth=1.5) +
  geom_function(aes(color="L0(x)"), fun=L0, linewidth=0.75) +
  geom_function(aes(color="L1(x)"), fun=L1, linewidth=0.75) +
  geom_function(aes(color="L2(x)"), fun=L2, linewidth=0.75) +
  geom_function(aes(color="L3(x)"), fun=L3, linewidth=0.75) +
  geom_function(aes(color="L4(x)"), fun=L4, linewidth=0.75) +
  geom_function(aes(color="P(x)"), fun=pol_lagrange, linewidth=0.5) +
  geom_function(fun=pol_lagrange, color="#FFCC9E") +
  geom_point(aes(x, y), size=2.1, color="#F2862C") +
  #geom_point(aes(x=0.43, y=f(0.43)), color="#71B966", size=2.3) + # Corrección aquí
  scale_color_manual(values=my_colors) +
  labs(x="x", y="y", color="Función", title="Gráfica 1a") +
  scale_x_continuous(breaks=x, limits=c(0, 2*pi)) +
  theme_bw()

ggplotly(graf_pol)
```

















